<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python3中的类和对象科普</title>
      <link href="/2019/02/23/python3-zhong-de-lei/"/>
      <url>/2019/02/23/python3-zhong-de-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="类属性和类方法"><a href="#类属性和类方法" class="headerlink" title="类属性和类方法"></a>类属性和类方法</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><h3 id="类的结构"><a href="#类的结构" class="headerlink" title="类的结构"></a>类的结构</h3><h3 id="类属性和实例属性"><a href="#类属性和实例属性" class="headerlink" title="类属性和实例属性"></a>类属性和实例属性</h3><h3 id="类方法和静态方法"><a href="#类方法和静态方法" class="headerlink" title="类方法和静态方法"></a>类方法和静态方法</h3><h2 id="01-类的结构"><a href="#01-类的结构" class="headerlink" title="01. 类的结构"></a>01. 类的结构</h2><h3 id="1-1-术语-——-实例"><a href="#1-1-术语-——-实例" class="headerlink" title="1.1 术语 —— 实例"></a>1.1 术语 —— 实例</h3><p>使用面相对象开发，第 1 步 是设计 类<br>使用 类名() 创建对象，创建对象 的动作有两步：<br>1) 在内存中为对象 分配空间<br>2) 调用初始化方法 <strong>init</strong> 为 对象初始化<br>对象创建后，内存中就有了一个对象的 实实在在 的存在——实例</p><p><img src="http://pnbdq6q26.bkt.clouddn.com/017_%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BEI.png" alt="类的结构示意图I"><br>因此，通常也会把：</p><p>1).创建出来的 对象 叫做 类 的 实例<br><br>2).创建对象的 动作 叫做 实例化<br><br>3).对象的属性 叫做 实例属性<br><br>4).对象调用的方法 叫做 实例方法<br></p><p>在程序执行时：<br><br>对象各自拥有自己的 实例属性<br><br>调用对象方法，可以通过 self.<br><br>访问自己的属性<br><br>调用自己的方法<br></p><p>结论</p><p>每一个对象 都有自己 独立的内存空间，保存各自不同的属性多个对象的方法，在内存中只有一份，在调用方法时，需要把对象的引用 传递到方法内部</p><h3 id="1-2-类是一个特殊的对象"><a href="#1-2-类是一个特殊的对象" class="headerlink" title="1.2 类是一个特殊的对象"></a>1.2 类是一个特殊的对象</h3><p>Python 中 一切皆对象：</p><pre><code>    class AAA: 定义的类属于 类对象    obj1 = AAA() 属于 实例对象在程序运行时，类 同样 会被加载到内存在 Python 中，类 是一个特殊的对象 —— 类对象在程序运行时，类对象 在内存中 只有一份，使用 一个类 可以创建出 很多个对象实例除了封装 实例 的 属性 和 方法外，类对象 还可以拥有自己的 属性 和 方法    类属性    类方法通过 类名. 的方式可以 访问类的属性 或者 调用类的方法</code></pre><p><img src="http://pnbdq6q26.bkt.clouddn.com/017_%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BEII.png" alt="类的结构示意图II"></p><h2 id="02-类属性和实例属性"><a href="#02-类属性和实例属性" class="headerlink" title="02. 类属性和实例属性"></a>02. 类属性和实例属性</h2><h3 id="2-1-概念和使用"><a href="#2-1-概念和使用" class="headerlink" title="2.1 概念和使用"></a>2.1 概念和使用</h3><pre><code>类属性 就是给 类对象 中定义的 属性通常用来记录 与这个类相关 的特征类属性 不会用于记录 具体对象的特征</code></pre><p>示例需求</p><pre><code>定义一个 工具类每件工具都有自己的 name需求 —— 知道使用这个类，创建了多少个工具对象？</code></pre><p><img src="http://pnbdq6q26.bkt.clouddn.com/018_%E7%B1%BB%E5%B1%9E%E6%80%A7%E6%A1%88%E4%BE%8BI.png" alt="类属性案例I"></p><pre><code>class Tool(object):    # 使用赋值语句，定义类属性，记录创建工具对象的总数    count = 0    def __init__(self, name):        self.name = name        # 针对类属性做一个计数+1        Tool.count += 1</code></pre><h3 id="创建工具对象"><a href="#创建工具对象" class="headerlink" title="创建工具对象"></a>创建工具对象</h3><pre><code>tool1 = Tool(&quot;斧头&quot;)tool2 = Tool(&quot;榔头&quot;)tool3 = Tool(&quot;铁锹&quot;)</code></pre><h3 id="知道使用-Tool-类到底创建了多少个对象"><a href="#知道使用-Tool-类到底创建了多少个对象" class="headerlink" title="知道使用 Tool 类到底创建了多少个对象?"></a>知道使用 Tool 类到底创建了多少个对象?</h3><pre><code>print(&quot;现在创建了 %d 个工具&quot; % Tool.count)</code></pre><h3 id="2-2-属性的获取机制（科普）"><a href="#2-2-属性的获取机制（科普）" class="headerlink" title="2.2 属性的获取机制（科普）"></a>2.2 属性的获取机制（科普）</h3><p>在 Python 中 属性的获取 存在一个 向上查找机制</p><p>通过对象访问类属性<br><img src="http://pnbdq6q26.bkt.clouddn.com/019_%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E7%B1%BB%E5%B1%9E%E6%80%A7.png" alt="通过对象访问类属性"><br>因此，要访问类属性有两种方式：<br>类名.类属性<br>对象.类属性 （不推荐）</p><p>注意:<br>如果使用 对象.类属性 = 值 赋值语句，只会 给对象添加一个属性，而不会影响到 类属性的值</p><h2 id="03-类方法和静态方法"><a href="#03-类方法和静态方法" class="headerlink" title="03. 类方法和静态方法"></a>03. 类方法和静态方法</h2><h3 id="3-1-类方法"><a href="#3-1-类方法" class="headerlink" title="3.1 类方法"></a>3.1 类方法</h3><pre><code>类属性 就是针对 类对象 定义的属性    使用 赋值语句 在 class 关键字下方可以定义 类属性    类属性 用于记录 与这个类相关 的特征类方法 就是针对 类对象 定义的方法    在 类方法 内部可以直接访问 类属性 或者调用其他的 类方法</code></pre><p>语法如下</p><pre><code>@classmethoddef 类方法名(cls):    pass类方法需要用 修饰器 @classmethod 来标识，告诉解释器这是一个类方法类方法的 第一个参数 应该是 cls    由 哪一个类 调用的方法，方法内的 cls 就是 哪一个类的引用    这个参数和 实例方法 的第一个参数是 self 类似    提示 使用其他名称也可以，不过习惯使用 cls通过 类名. 调用 类方法，调用方法时，不需要传递 cls 参数在方法内部    可以通过 cls. 访问类的属性    也可以通过 cls. 调用其他的类方法</code></pre><p>示例需求<br>定义一个 工具类<br><br>每件工具都有自己的 name<br><br>需求 —— 在 类 封装一个 show_tool_count 的类方法，输出使用当前这个类，创建的对象个数<br></p><p>类方法案例￼<br><img src="http://pnbdq6q26.bkt.clouddn.com/020_%E7%B1%BB%E6%96%B9%E6%B3%95%E6%A1%88%E4%BE%8B.png" alt="类方法案例"></p><pre><code>@classmethoddef show_tool_count(cls):    &quot;&quot;&quot;显示工具对象的总数&quot;&quot;&quot;    print(&quot;工具对象的总数 %d&quot; % cls.count)在类方法内部，可以直接使用 cls 访问 类属性 或者 调用类方法</code></pre><h3 id="3-2-静态方法"><a href="#3-2-静态方法" class="headerlink" title="3.2 静态方法"></a>3.2 静态方法</h3><pre><code>在开发时，如果需要在 类 中封装一个方法，这个方法：    既 不需要 访问 实例属性 或者调用 实例方法    也 不需要 访问 类属性 或者调用 类方法这个时候，可以把这个方法封装成一个 静态方法</code></pre><p>语法如下</p><pre><code>@staticmethoddef 静态方法名():    pass静态方法 需要用 修饰器 @staticmethod 来标识，告诉解释器这是一个静态方法通过 类名. 调用 静态方法class Dog(object):    # 狗对象计数    dog_count = 0    @staticmethod    def run():        # 不需要访问实例属性也不需要访问类属性的方法        print(&quot;狗在跑...&quot;)    def __init__(self, name):        self.name = name</code></pre><h2 id="3-3-方法综合案例"><a href="#3-3-方法综合案例" class="headerlink" title="3.3 方法综合案例"></a>3.3 方法综合案例</h2><p>需求</p><pre><code>设计一个 Game 类属性：    定义一个 类属性 top_score 记录游戏的 历史最高分    定义一个 实例属性 player_name 记录 当前游戏的玩家姓名方法：    静态方法 show_help 显示游戏帮助信息    类方法 show_top_score 显示历史最高分    实例方法 start_game 开始当前玩家的游戏主程序步骤    1) 查看帮助信息    2) 查看历史最高分    3) 创建游戏对象，开始游戏</code></pre><p>方法综合案例<br><img src="http://pnbdq6q26.bkt.clouddn.com/021_%E6%96%B9%E6%B3%95%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.png" alt="方法综合案例"><br>案例小结</p><p>实例方法 —— 方法内部需要访问 实例属性<br><br>实例方法 内部可以使用 类名. 访问类属性<br><br>类方法 —— 方法内部 只 需要访问 类属性<br><br>静态方法 —— 方法内部，不需要访问 实例属性 和 类属性</p><p>提问:</p><p>如果方法内部 即需要访问 实例属性，又需要访问 类属性，应该定义成什么方法？</p><p>答案:</p><p>应该定义 实例方法<br>因为，类只有一个，在 实例方法 内部可以使用 类名. 访问类属性</p><pre><code>class Game(object):    # 游戏最高分，类属性    top_score = 0    @staticmethod    def show_help():        print(&quot;帮助信息：让僵尸走进房间&quot;)    @classmethod    def show_top_score(cls):        print(&quot;游戏最高分是 %d&quot; % cls.top_score)    def __init__(self, player_name):        self.player_name = player_name    def start_game(self):        print(&quot;[%s] 开始游戏...&quot; % self.player_name)        # 使用类名.修改历史最高分        Game.top_score = 999#1. 查看游戏帮助Game.show_help()# 2. 查看游戏最高分Game.show_top_score()# 3. 创建游戏对象，开始游戏game = Game(&quot;小明&quot;)game.start_game()# 4. 游戏结束，查看游戏最高分Game.show_top_score()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 类和对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3中的高级变量</title>
      <link href="/2019/02/23/gao-ji-bian-liang-lei-xing/"/>
      <url>/2019/02/23/gao-ji-bian-liang-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="高级变量类型"><a href="#高级变量类型" class="headerlink" title="高级变量类型"></a>高级变量类型</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>列表</li><li>元组</li><li>字典</li><li>字符串</li><li>公共方法</li><li>变量高级</li></ul><h3 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h3><ul><li>Python 中数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></li><li>数字型<ul><li>整型 (<code>int</code>)</li><li>浮点型（<code>float</code>）</li><li>布尔型（<code>bool</code>） <ul><li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li><li>假 <code>False</code> <code>0</code></li></ul></li><li>复数型 (<code>complex</code>)<ul><li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li></ul></li></ul></li><li><p>非数字型</p><ul><li>字符串</li><li>列表</li><li>元组</li><li>字典</li></ul></li><li><p>在 <code>Python</code> 中，所有 <strong>非数字型变量</strong> 都支持以下特点：</p><ol><li>都是一个 <strong>序列</strong> <code>sequence</code>，也可以理解为 <strong>容器</strong></li><li><strong>取值</strong> <code>[]</code></li><li><strong>遍历</strong> <code>for in</code></li><li><strong>计算长度</strong>、<strong>最大/最小值</strong>、<strong>比较</strong>、<strong>删除</strong></li><li><strong>链接</strong> <code>+</code> 和 <strong>重复</strong> <code>*</code></li><li><strong>切片</strong></li></ol></li></ul><h2 id="01-列表"><a href="#01-列表" class="headerlink" title="01. 列表"></a>01. 列表</h2><h3 id="1-1-列表的定义"><a href="#1-1-列表的定义" class="headerlink" title="1.1 列表的定义"></a>1.1 列表的定义</h3><ul><li><code>List</code>（列表） 是 <code>Python</code> 中使用 <strong>最频繁</strong> 的数据类型，在其他语言中通常叫做 <strong>数组</strong></li><li>专门用于存储 <strong>一串 信息</strong></li><li>列表用 <code>[]</code> 定义，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li><li>列表的 <strong>索引</strong> 从 <code>0</code> 开始<ul><li><strong>索引</strong> 就是数据在 <strong>列表</strong> 中的位置编号，<strong>索引</strong> 又可以被称为 <strong>下标</strong></li></ul></li></ul><blockquote><p>注意：从列表中取值时，如果 <strong>超出索引范围</strong>，程序会报错</p></blockquote><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"wangwu"</span><span class="token punctuation">]</span></code></pre><p><img src="http://pnbdq6q26.bkt.clouddn.com/001_%E5%88%97%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="001_列表示意图"></p><h3 id="1-2-列表常用操作"><a href="#1-2-列表常用操作" class="headerlink" title="1.2 列表常用操作"></a>1.2 列表常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>列表</strong>，例如：<code>name_list = []</code></li><li>输入 <code>name_list.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>列表</strong> 能够使用的 <strong>方法</strong> 如下：</li></ul><pre><code>In [1]: name_list.name_list.append   name_list.count    name_list.insert   name_list.reversename_list.clear    name_list.extend   name_list.pop      name_list.sortname_list.copy     name_list.index    name_list.remove </code></pre><table><thead><tr><th>序号</th><th>分类</th><th>关键字 / 函数 / 方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>增加</td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td></td><td>列表.extend(列表2)</td><td>将列表2 的数据追加到列表</td></tr><tr><td>2</td><td>修改</td><td>列表[索引] = 数据</td><td>修改指定索引的数据</td></tr><tr><td>3</td><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td>列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td></td><td>列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td>4</td><td>统计</td><td>len(列表)</td><td>列表长度</td></tr><tr><td></td><td></td><td>列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td>5</td><td>排序</td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td></td><td>列表.sort(reverse=True)</td><td>降序排序</td></tr><tr><td></td><td></td><td>列表.reverse()</td><td>逆序、反转</td></tr></tbody></table><h4 id="del-关键字（科普）"><a href="#del-关键字（科普）" class="headerlink" title="del 关键字（科普）"></a>del 关键字（科普）</h4><ul><li>使用 <code>del</code> 关键字(<code>delete</code>) 同样可以删除列表中元素</li><li><code>del</code> 关键字本质上是用来 <strong>将一个变量从内存中删除的</strong></li><li>如果使用 <code>del</code> 关键字将变量从内存中删除，后续的代码就不能再使用这个变量了</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">del</span> name_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><blockquote><p>在日常开发中，要从列表删除数据，建议 <strong>使用列表提供的方法</strong></p></blockquote><h4 id="关键字、函数和方法（科普）"><a href="#关键字、函数和方法（科普）" class="headerlink" title="关键字、函数和方法（科普）"></a>关键字、函数和方法（科普）</h4><ul><li><strong>关键字</strong> 是 Python 内置的、具有特殊意义的标识符</li></ul><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> keywordIn <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>关键字后面不需要使用括号</p></blockquote><ul><li><strong>函数</strong> 封装了独立功能，可以直接调用</li></ul><pre class=" language-python"><code class="language-python">函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span></code></pre><blockquote><p>函数需要死记硬背</p></blockquote><ul><li><strong>方法</strong> 和函数类似，同样是封装了独立的功能</li><li><strong>方法</strong> 需要通过 <strong>对象</strong> 来调用，表示针对这个 <strong>对象</strong> 要做的操作</li></ul><pre class=" language-python"><code class="language-python">对象<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span></code></pre><blockquote><p>在变量后面输入 <code>.</code>，然后选择针对这个变量要执行的操作，记忆起来比函数要简单很多</p></blockquote><h3 id="1-3-循环遍历"><a href="#1-3-循环遍历" class="headerlink" title="1.3 循环遍历"></a>1.3 循环遍历</h3><ul><li><p><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>列表</strong> 中获取数据</p><ul><li>在 <strong>循环体内部</strong> 针对 <strong>每一个元素</strong>，执行相同的操作</li></ul></li><li><p>在 <code>Python</code> 中为了提高列表的遍历效率，专门提供的 <strong>迭代 iteration 遍历</strong></p></li><li>使用 <code>for</code> 就能够实现迭代遍历</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># for 循环内部使用的变量 in 列表</span><span class="token keyword">for</span> name <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>    循环内部针对列表元素进行操作    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></code></pre><p><img src="http://pnbdq6q26.bkt.clouddn.com/002_forin%E5%BE%AA%E7%8E%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="002_forin循环流程图-w420"></p><h3 id="1-4-应用场景"><a href="#1-4-应用场景" class="headerlink" title="1.4 应用场景"></a>1.4 <strong>应用场景</strong></h3><ul><li>尽管 <code>Python</code> 的 <strong>列表</strong> 中可以 <strong>存储不同类型的数据</strong></li><li>但是在开发中，更多的应用场景是<ol><li><strong>列表</strong> 存储相同类型的数据</li><li>通过 <strong>迭代遍历</strong>，在循环体内部，针对列表中的每一项元素，执行相同的操作</li></ol></li></ul><h2 id="02-元组"><a href="#02-元组" class="headerlink" title="02. 元组"></a>02. 元组</h2><h3 id="2-1-元组的定义"><a href="#2-1-元组的定义" class="headerlink" title="2.1 元组的定义"></a>2.1 元组的定义</h3><ul><li><code>Tuple</code>（元组）与列表类似，不同之处在于元组的 <strong>元素不能修改</strong><ul><li><strong>元组</strong> 表示多个元素组成的序列</li><li><strong>元组</strong> 在 <code>Python</code> 开发中，有特定的应用场景</li></ul></li><li>用于存储 <strong>一串 信息</strong>，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li><li>元组用 <code>()</code> 定义</li><li>元组的 <strong>索引</strong> 从 <code>0</code> 开始<ul><li><strong>索引</strong> 就是数据在 <strong>元组</strong> 中的位置编号</li></ul></li></ul><pre class=" language-python"><code class="language-python">info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1.75</span><span class="token punctuation">)</span></code></pre><h4 id="创建空元组"><a href="#创建空元组" class="headerlink" title="创建空元组"></a>创建空元组</h4><pre class=" language-python"><code class="language-python">info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="元组中-只包含一个元素-时，需要-在元素后面添加逗号"><a href="#元组中-只包含一个元素-时，需要-在元素后面添加逗号" class="headerlink" title="元组中 只包含一个元素 时，需要 在元素后面添加逗号"></a>元组中 <strong>只包含一个元素</strong> 时，需要 <strong>在元素后面添加逗号</strong></h4><pre class=" language-python"><code class="language-python">info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">)</span></code></pre><p><img src="http://pnbdq6q26.bkt.clouddn.com/003_%E5%85%83%E7%BB%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="003_元组示意图-w500"></p><h3 id="2-2-元组常用操作"><a href="#2-2-元组常用操作" class="headerlink" title="2.2 元组常用操作"></a>2.2 元组常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>元组</strong>，例如：<code>info = ()</code></li><li>输入 <code>info.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>元组</strong> 能够使用的函数如下：</li></ul><pre class=" language-python"><code class="language-python">info<span class="token punctuation">.</span>count  info<span class="token punctuation">.</span>index</code></pre><blockquote><p>有关 <strong>元组</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p></blockquote><h3 id="2-3-循环遍历"><a href="#2-3-循环遍历" class="headerlink" title="2.3 循环遍历"></a>2.3 循环遍历</h3><ul><li><strong>取值</strong> 就是从 <strong>元组</strong> 中获取存储在指定位置的数据</li><li><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>元组</strong> 中获取数据</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># for 循环内部使用的变量 in 元组</span><span class="token keyword">for</span> item <span class="token keyword">in</span> info<span class="token punctuation">:</span>    循环内部针对元组元素进行操作    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><blockquote><ul><li>在 <code>Python</code> 中，可以使用 <code>for</code> 循环遍历所有非数字型类型的变量：<strong>列表</strong>、<strong>元组</strong>、<strong>字典</strong> 以及 <strong>字符串</strong></li><li>提示：在实际开发中，除非 <strong>能够确认元组中的数据类型</strong>，否则针对元组的循环遍历需求并不是很多</li></ul></blockquote><h3 id="2-4-应用场景"><a href="#2-4-应用场景" class="headerlink" title="2.4 应用场景"></a>2.4 应用场景</h3><ul><li>尽管可以使用 <code>for in</code> 遍历 <strong>元组</strong></li><li>但是在开发中，更多的应用场景是：<ul><li><strong>函数的 参数 和 返回值</strong>，一个函数可以接收 <strong>任意多个参数</strong>，或者 <strong>一次返回多个数据</strong><ul><li>有关 <strong>函数的参数 和 返回值</strong>，在后续 <strong>函数高级</strong> 给大家介绍</li></ul></li><li><strong>格式字符串</strong>，格式化字符串后面的 <code>()</code> 本质上就是一个元组</li><li><strong>让列表不可以被修改</strong>，以保护数据安全</li></ul></li></ul><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 的年龄是 %d"</span> <span class="token operator">%</span> info<span class="token punctuation">)</span></code></pre><h4 id="元组和列表之间的转换"><a href="#元组和列表之间的转换" class="headerlink" title="元组和列表之间的转换"></a>元组和列表之间的转换</h4><ul><li>使用 <code>list</code> 函数可以把元组转换成列表</li></ul><pre class=" language-python"><code class="language-python">list<span class="token punctuation">(</span>元组<span class="token punctuation">)</span> </code></pre><ul><li>使用 <code>tuple</code> 函数可以把列表转换成元组</li></ul><pre class=" language-python"><code class="language-python">tuple<span class="token punctuation">(</span>列表<span class="token punctuation">)</span></code></pre><h2 id="03-字典"><a href="#03-字典" class="headerlink" title="03. 字典"></a>03. 字典</h2><h3 id="3-1-字典的定义"><a href="#3-1-字典的定义" class="headerlink" title="3.1 字典的定义"></a>3.1 字典的定义</h3><ul><li><code>dictionary</code>（字典） 是 <strong>除列表以外</strong> <code>Python</code> 之中 <strong>最灵活</strong> 的数据类型</li><li>字典同样可以用来 <strong>存储多个数据</strong><ul><li>通常用于存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> </li></ul></li><li>和列表的区别<ul><li><strong>列表</strong> 是 <strong>有序</strong> 的对象集合</li><li><strong>字典</strong> 是 <strong>无序</strong> 的对象集合</li></ul></li><li>字典用 <code>{}</code> 定义</li><li>字典使用 <strong>键值对</strong> 存储数据，键值对之间使用 <code>,</code> 分隔<ul><li><strong>键</strong> <code>key</code> 是索引</li><li><strong>值</strong> <code>value</code> 是数据</li><li><strong>键</strong> 和 <strong>值</strong> 之间使用 <code>:</code> 分隔</li><li><strong>键必须是唯一的</strong></li><li><strong>值</strong> 可以取任何数据类型，但 <strong>键</strong> 只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong></li></ul></li></ul><pre class=" language-python"><code class="language-python">xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>            <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>            <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">1.75</span><span class="token punctuation">}</span></code></pre><p><img src="http://pnbdq6q26.bkt.clouddn.com/002_%E5%AD%97%E5%85%B8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="002_字典示意图"></p><h3 id="3-2-字典常用操作"><a href="#3-2-字典常用操作" class="headerlink" title="3.2 字典常用操作"></a>3.2 字典常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>字典</strong>，例如：<code>xiaoming = {}</code></li><li>输入 <code>xiaoming.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字典</strong> 能够使用的函数如下：</li></ul><pre><code>In [1]: xiaoming.xiaoming.clear       xiaoming.items       xiaoming.setdefaultxiaoming.copy        xiaoming.keys        xiaoming.updatexiaoming.fromkeys    xiaoming.pop         xiaoming.valuesxiaoming.get         xiaoming.popitem    </code></pre><blockquote><p>有关 <strong>字典</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p></blockquote><h3 id="3-3-循环遍历"><a href="#3-3-循环遍历" class="headerlink" title="3.3 循环遍历"></a>3.3 循环遍历</h3><ul><li><strong>遍历</strong> 就是 <strong>依次</strong> 从 <strong>字典</strong> 中获取所有键值对</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># for 循环内部使用的 `key 的变量` in 字典</span><span class="token keyword">for</span> k <span class="token keyword">in</span> xiaoming<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> xiaoming<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>提示：在实际开发中，由于字典中每一个键值对保存数据的类型是不同的，所以针对字典的循环遍历需求并不是很多</p></blockquote><h3 id="3-4-应用场景"><a href="#3-4-应用场景" class="headerlink" title="3.4 应用场景"></a>3.4 <strong>应用场景</strong></h3><ul><li>尽管可以使用 <code>for in</code> 遍历 <strong>字典</strong></li><li>但是在开发中，更多的应用场景是：<ul><li>使用 <strong>多个键值对</strong>，存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> —— 描述更复杂的数据信息</li><li>将 <strong>多个字典</strong> 放在 <strong>一个列表</strong> 中，再进行遍历，在循环体内部针对每一个字典进行 <strong>相同的处理</strong></li></ul></li></ul><pre class=" language-python"><code class="language-python">card_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>              <span class="token string">"qq"</span><span class="token punctuation">:</span> <span class="token string">"12345"</span><span class="token punctuation">,</span>              <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"110"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>              <span class="token string">"qq"</span><span class="token punctuation">:</span> <span class="token string">"54321"</span><span class="token punctuation">,</span>              <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"10086"</span><span class="token punctuation">}</span>             <span class="token punctuation">]</span></code></pre><h2 id="04-字符串"><a href="#04-字符串" class="headerlink" title="04. 字符串"></a>04. 字符串</h2><h3 id="4-1-字符串的定义"><a href="#4-1-字符串的定义" class="headerlink" title="4.1 字符串的定义"></a>4.1 字符串的定义</h3><ul><li><strong>字符串</strong> 就是 <strong>一串字符</strong>，是编程语言中表示文本的数据类型</li><li>在 Python 中可以使用 <strong>一对双引号</strong> <code>&quot;</code> 或者 <strong>一对单引号</strong> <code>&#39;</code> 定义一个字符串<ul><li>虽然可以使用 <code>\&quot;</code> 或者 <code>\&#39;</code> 做字符串的转义，但是在实际开发中：<ul><li>如果字符串内部需要使用 <code>&quot;</code>，可以使用 <code>&#39;</code> 定义字符串</li><li>如果字符串内部需要使用 <code>&#39;</code>，可以使用 <code>&quot;</code> 定义字符串</li></ul></li></ul></li><li>可以使用 <strong>索引</strong> 获取一个字符串中 <strong>指定位置的字符</strong>，索引计数从 <strong>0</strong> 开始</li><li>也可以使用 <code>for</code> <strong>循环遍历</strong> 字符串中每一个字符</li></ul><blockquote><p>大多数编程语言都是用 <code>&quot;</code> 来定义字符串</p></blockquote><pre class=" language-python"><code class="language-python">string <span class="token operator">=</span> <span class="token string">"Hello Python"</span><span class="token keyword">for</span> c <span class="token keyword">in</span> string<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><p><img src="http://pnbdq6q26.bkt.clouddn.com/005_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="005_字符串示意图-w500"></p><h3 id="4-2-字符串的常用操作"><a href="#4-2-字符串的常用操作" class="headerlink" title="4.2 字符串的常用操作"></a>4.2 字符串的常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>字符串</strong>，例如：<code>hello_str = &quot;&quot;</code></li><li>输入 <code>hello_str.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字符串</strong> 能够使用的 <strong>方法</strong> 如下：</li></ul><pre><code>In [1]: hello_str.hello_str.capitalize    hello_str.isidentifier  hello_str.rindexhello_str.casefold      hello_str.islower       hello_str.rjusthello_str.center        hello_str.isnumeric     hello_str.rpartitionhello_str.count         hello_str.isprintable   hello_str.rsplithello_str.encode        hello_str.isspace       hello_str.rstriphello_str.endswith      hello_str.istitle       hello_str.splithello_str.expandtabs    hello_str.isupper       hello_str.splitlineshello_str.find          hello_str.join          hello_str.startswithhello_str.format        hello_str.ljust         hello_str.striphello_str.format_map    hello_str.lower         hello_str.swapcasehello_str.index         hello_str.lstrip        hello_str.titlehello_str.isalnum       hello_str.maketrans     hello_str.translatehello_str.isalpha       hello_str.partition     hello_str.upperhello_str.isdecimal     hello_str.replace       hello_str.zfillhello_str.isdigit       hello_str.rfind</code></pre><blockquote><p>提示：正是因为 python 内置提供的方法足够多，才使得在开发时，能够针对字符串进行更加灵活的操作！应对更多的开发需求！</p></blockquote><h4 id="1-判断类型-9"><a href="#1-判断类型-9" class="headerlink" title="1) 判断类型 - 9"></a>1) 判断类型 - 9</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.isspace()</td><td>如果 string 中只包含空格，则返回 True</td></tr><tr><td>string.isalnum()</td><td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True</td></tr><tr><td>string.isalpha()</td><td>如果 string 至少有一个字符并且所有字符都是字母则返回 True</td></tr><tr><td>string.isdecimal()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code></td></tr><tr><td>string.isdigit()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>、<code>⑴</code>、<code>\u00b2</code></td></tr><tr><td>string.isnumeric()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code></td></tr><tr><td>string.istitle()</td><td>如果 string 是标题化的(每个单词的首字母大写)则返回 True</td></tr><tr><td>string.islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True</td></tr><tr><td>string.isupper()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True</td></tr></tbody></table><h4 id="2-查找和替换-7"><a href="#2-查找和替换-7" class="headerlink" title="2) 查找和替换 - 7"></a>2) 查找和替换 - 7</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.startswith(str)</td><td>检查字符串是否是以 str 开头，是则返回 True</td></tr><tr><td>string.endswith(str)</td><td>检查字符串是否是以 str 结束，是则返回 True</td></tr><tr><td>string.find(str, start=0, end=len(string))</td><td>检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></td></tr><tr><td>string.rfind(str, start=0, end=len(string))</td><td>类似于 find()，不过是从右边开始查找</td></tr><tr><td>string.index(str, start=0, end=len(string))</td><td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td></tr><tr><td>string.rindex(str, start=0, end=len(string))</td><td>类似于 index()，不过是从右边开始</td></tr><tr><td>string.replace(old_str, new_str, num=string.count(old))</td><td>把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</td></tr></tbody></table><h4 id="3-大小写转换-5"><a href="#3-大小写转换-5" class="headerlink" title="3) 大小写转换 - 5"></a>3) 大小写转换 - 5</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>string.title()</td><td>把字符串的每个单词首字母大写</td></tr><tr><td>string.lower()</td><td>转换 string 中所有大写字符为小写</td></tr><tr><td>string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td>string.swapcase()</td><td>翻转 string 中的大小写</td></tr></tbody></table><h4 id="4-文本对齐-3"><a href="#4-文本对齐-3" class="headerlink" title="4) 文本对齐 - 3"></a>4) 文本对齐 - 3</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td></tr></tbody></table><h4 id="5-去除空白字符-3"><a href="#5-去除空白字符-3" class="headerlink" title="5) 去除空白字符 - 3"></a>5) 去除空白字符 - 3</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.lstrip()</td><td>截掉 string 左边（开始）的空白字符</td></tr><tr><td>string.rstrip()</td><td>截掉 string 右边（末尾）的空白字符</td></tr><tr><td>string.strip()</td><td>截掉 string 左右两边的空白字符</td></tr></tbody></table><h4 id="6-拆分和连接-5"><a href="#6-拆分和连接-5" class="headerlink" title="6) 拆分和连接 - 5"></a>6) 拆分和连接 - 5</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.partition(str)</td><td>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</td></tr><tr><td>string.rpartition(str)</td><td>类似于 partition() 方法，不过是从右边开始查找</td></tr><tr><td>string.split(str=””, num)</td><td>以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\r’, ‘\t’, ‘\n’ 和空格</td></tr><tr><td>string.splitlines()</td><td>按照行(‘\r’, ‘\n’, ‘\r\n’)分隔，返回一个包含各行作为元素的列表</td></tr><tr><td>string.join(seq)</td><td>以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串</td></tr></tbody></table><h3 id="4-3-字符串的切片"><a href="#4-3-字符串的切片" class="headerlink" title="4.3 字符串的切片"></a>4.3 字符串的切片</h3><ul><li><strong>切片</strong> 方法适用于 <strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据<pre><code></code></pre>字符串[开始索引:结束索引:步长]<br><code>`</code></li></ul></li></ul><p><strong>注意</strong>：</p><ol><li>指定的区间属于 <strong>左闭右开</strong> 型 <code>[开始索引,  结束索引)</code> =&gt; <code>开始索引 &gt;= 范围 &lt; 结束索引</code><ul><li>从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)</li></ul></li><li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong></li></ol><h4 id="索引的顺序和倒序"><a href="#索引的顺序和倒序" class="headerlink" title="索引的顺序和倒序"></a>索引的顺序和倒序</h4><ul><li>在 Python 中不仅支持 <strong>顺序索引</strong>，同时还支持 <strong>倒序索引</strong></li><li>所谓倒序索引就是 <strong>从右向左</strong> 计算索引<ul><li>最右边的索引值是 <strong>-1</strong>，依次递减</li></ul></li></ul><p><strong>演练需求</strong></p><ul><li><ol><li>截取从 2 ~ 5 位置 的字符串</li></ol></li><li><ol start="2"><li>截取从 2 ~ <code>末尾</code> 的字符串</li></ol></li><li><ol start="3"><li>截取从 <code>开始</code> ~ 5 位置 的字符串</li></ol></li><li><ol start="4"><li>截取完整的字符串</li></ol></li><li><ol start="5"><li>从开始位置，每隔一个字符截取字符串</li></ol></li><li><ol start="6"><li>从索引 1 开始，每隔一个取一个</li></ol></li><li><ol start="7"><li>截取从 2 ~ <code>末尾 - 1</code> 的字符串</li></ol></li><li><ol start="8"><li>截取字符串末尾两个字符</li></ol></li><li><ol start="9"><li>字符串的逆序（面试题）</li></ol></li></ul><p><strong>答案</strong></p><pre><code>num_str = &quot;0123456789&quot;# 1. 截取从 2 ~ 5 位置 的字符串print(num_str[2:6])# 2. 截取从 2 ~ `末尾` 的字符串print(num_str[2:])# 3. 截取从 `开始` ~ 5 位置 的字符串print(num_str[:6])# 4. 截取完整的字符串print(num_str[:])# 5. 从开始位置，每隔一个字符截取字符串print(num_str[::2])# 6. 从索引 1 开始，每隔一个取一个print(num_str[1::2])# 倒序切片# -1 表示倒数第一个字符print(num_str[-1])# 7. 截取从 2 ~ `末尾 - 1` 的字符串print(num_str[2:-1])# 8. 截取字符串末尾两个字符print(num_str[-2:])# 9. 字符串的逆序（面试题）print(num_str[::-1])</code></pre><h2 id="05-公共方法"><a href="#05-公共方法" class="headerlink" title="05. 公共方法"></a>05. 公共方法</h2><h3 id="5-1-Python-内置函数"><a href="#5-1-Python-内置函数" class="headerlink" title="5.1 Python 内置函数"></a>5.1 Python 内置函数</h3><p>Python 包含了以下内置函数：</p><table><thead><tr><th>函数</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>len(item)</td><td>计算容器中元素个数</td><td></td></tr><tr><td>del(item)</td><td>删除变量</td><td>del 有两种方式</td></tr><tr><td>max(item)</td><td>返回容器中元素最大值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>min(item)</td><td>返回容器中元素最小值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>cmp(item1, item2)</td><td>比较两个值，-1 小于/0 相等/1 大于</td><td>Python 3.x 取消了 cmp 函数</td></tr></tbody></table><p><strong>注意</strong></p><ul><li><strong>字符串</strong> 比较符合以下规则： “0” &lt; “A” &lt; “a”</li></ul><h3 id="5-2-切片"><a href="#5-2-切片" class="headerlink" title="5.2 切片"></a>5.2 切片</h3><table><thead><tr><th style="text-align:center">描述</th><th>Python 表达式</th><th>结果</th><th>支持的数据类型</th></tr></thead><tbody><tr><td style="text-align:center">切片</td><td>“0123456789”[::-2]</td><td>“97531”</td><td>字符串、列表、元组</td></tr></tbody></table><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul><h3 id="5-3-运算符"><a href="#5-3-运算符" class="headerlink" title="5.3 运算符"></a>5.3 运算符</h3><table><thead><tr><th style="text-align:center">运算符</th><th>Python 表达式</th><th>结果</th><th>描述</th><th>支持的数据类型</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td style="text-align:center">*</td><td>[“Hi!”] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td><td>字符串、列表、元组</td></tr><tr><td style="text-align:center">in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td style="text-align:center">not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr><tr><td style="text-align:center">&gt; &gt;= == &lt; &lt;=</td><td>(1, 2, 3) &lt; (2, 2, 3)</td><td>True</td><td>元素比较</td><td>字符串、列表、元组</td></tr></tbody></table><p><strong>注意</strong></p><ul><li><code>in</code> 在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></li><li><code>in</code> 和 <code>not in</code> 被称为 <strong>成员运算符</strong></li></ul><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>成员运算符用于 <strong>测试</strong> 序列中是否包含指定的 <strong>成员</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False</td><td><code>3 in (1, 2, 3)</code> 返回 <code>True</code></td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td><td><code>3 not in (1, 2, 3)</code> 返回 <code>False</code></td></tr></tbody></table><p>注意：在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></p><h3 id="5-4-完整的-for-循环语法"><a href="#5-4-完整的-for-循环语法" class="headerlink" title="5.4 完整的 for 循环语法"></a>5.4 完整的 for 循环语法</h3><ul><li>在 <code>Python</code> 中完整的 <code>for 循环</code> 的语法如下：</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 集合<span class="token punctuation">:</span>    循环体代码<span class="token keyword">else</span><span class="token punctuation">:</span>    没有通过 <span class="token keyword">break</span> 退出循环，循环结束后，会执行的代码</code></pre><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>在 <strong>迭代遍历</strong> 嵌套的数据类型时，例如 <strong>一个列表包含了多个字典</strong></li><li>需求：要判断 某一个字典中 是否存在 指定的 值 <ul><li>如果 <strong>存在</strong>，提示并且退出循环</li><li>如果 <strong>不存在</strong>，在 <strong>循环整体结束</strong> 后，希望 <strong>得到一个统一的提示</strong></li></ul></li></ul><pre class=" language-python"><code class="language-python">students <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>     <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>     <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>     <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">1.7</span><span class="token punctuation">,</span>     <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token number">75.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小美"</span><span class="token punctuation">,</span>     <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>     <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>     <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">1.6</span><span class="token punctuation">,</span>     <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token number">45.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span>find_name <span class="token operator">=</span> <span class="token string">"阿狗"</span><span class="token keyword">for</span> stu_dict <span class="token keyword">in</span> students<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stu_dict<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断当前遍历的字典中姓名是否为find_name</span>    <span class="token keyword">if</span> stu_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">==</span> find_name<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"找到了"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果已经找到，直接退出循环，就不需要再对后续的数据进行比较</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有找到"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环结束"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3中的高级变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制与位运算</title>
      <link href="/2019/02/23/wei-yun-suan/"/>
      <url>/2019/02/23/wei-yun-suan/</url>
      
        <content type="html"><![CDATA[<h1 id="一、进制"><a href="#一、进制" class="headerlink" title="一、进制"></a>一、进制</h1><p>在计算机编程中，整数可以通过十进制、二进制、八进制和十六进制来表示</p><h2 id="1-十进制"><a href="#1-十进制" class="headerlink" title="1.十进制"></a>1.十进制</h2><p>a.基数：0，1，2，3，4，5，6，7，8，9<br>b.进位：逢10进1<br>c.位权：123(10) = 3<em>10**0 + 2</em>10<strong>1 + 1*10</strong>2</p><h2 id="2-二进制"><a href="#2-二进制" class="headerlink" title="2.二进制"></a>2.二进制</h2><p>a.基数：0，1<br>0111, 1100, 101010101, 1111100011<br>b.进位：逢2进1<br>100(2) == 4(10)   101(2) == 5(10)<br>c.位权：101(2) = 1<em>2**0 + 0</em>2<strong>1 + 1*2</strong>2 = 5</p><h2 id="3-八进制"><a href="#3-八进制" class="headerlink" title="3.八进制"></a>3.八进制</h2><p>a.基数：0，1，2，3，4，5，6，7<br>76， 26， 11<br>b.进位：逢8进1<br>c.位权：123(8) = 3<em>8**0+2</em>8<strong>1+1*8</strong>2 = 3+16+64 = 83<br>111(8) = 8<strong>0+8</strong>1+8**2 = 1+8+64 = 73  </p><h2 id="4-十六进制"><a href="#4-十六进制" class="headerlink" title="4.十六进制"></a>4.十六进制</h2><p>a.基数：0~9，a/A ~ f/F   – a/A(10), b/B(11), c/C(12), d/D(13), e/E(14), f/F(15)<br>1f, ff, abc, a00bf<br>b.进位：逢16进1<br>c.位权： 123(16) = 3<em>16**0 + 2</em>16<strong>1 + 1*16</strong>2 = 3+32+256=291</p><h3 id="1-程序中怎么表示不同进制的数"><a href="#1-程序中怎么表示不同进制的数" class="headerlink" title="1.程序中怎么表示不同进制的数"></a>1.程序中怎么表示不同进制的数</h3><p> a.十进制<br> 在程序中直接写的数字都是10进制</p><pre><code>num = 110   # 这是一个10进制数print(num)  # 直接打印其他进制数就会显示他的十进制</code></pre><p> b.二进制<br> <strong>0b/B+二进制数</strong></p><pre><code>num = 0b1110print(num)   # 2+4+8 num2 = 0b123   # 错误！print()print(bin(800))   # 获取一个数对应的二进制表示方式print(bin(0o671))  # 110111001print(bin(0xaf))   # 10101111print(bin(100))</code></pre><p> c.八进制<br> <strong>0o/O+八进制数</strong></p><pre><code>num = 0o176print(num)num = 0o78    # 错误！print(oct(800))print(oct(0b111000101))   # 0o705</code></pre><p> d.十六进制<br><strong> 0x/X + 十六进制数</strong></p><pre><code>num = 0xaf2print(num)num = 0xah   # 错误！</code></pre><pre><code>print(hex(19968))print(hex(175))print(hex(255))print(hex(0o456))</code></pre><pre><code>num1 = 17num2 = 0b10001num3 = 0o21num4 = 0x11print(num1, num2, num3, num4)</code></pre><pre><code>print(ord(&#39;一&#39;))print(&#39;aaa\u4e00kl&#39;)</code></pre><h1 id="二、位运算"><a href="#二、位运算" class="headerlink" title="二、位运算"></a>二、位运算</h1><h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><p><strong>计算机存储数据只能存储数字数据，而且存的是数字的补码。<br>计算机对数据进行运算的时候是使用补码进行运算的，将数据从计算机中读出来看到的是原码</strong></p><p>##1.原码：符号位+真值<br>说明：<br>符号位: 最高位用0表示正数，1表示负数<br>真值: 去掉正负，数字对应的二进制值</p><p>100的原码：01100100<br>-100的原码：11100100</p><p>##2.反码：<br>正数的反码：就是原码<br>负数的反码：原码的符号位不变,其余的位数取反(0-&gt;1, 1-&gt;0)</p><p>100的反码：01100100<br>-100的反码: 10011011</p><p>##3.补码<br>正数的补码：还是原码<br>负数的补码: 反码加1</p><p>100的补码：01100100<br>-100的反码：10011100  </p><p>练习: -50的原码、反码、补码<br>原码:1110010<br>反码:1001101<br>补码:1001110</p><h2 id="4-为什么计算机要存补码？"><a href="#4-为什么计算机要存补码？" class="headerlink" title="4.为什么计算机要存补码？"></a>4.为什么计算机要存补码？</h2><p><strong>因为计算中只有加法器，没有减法器</strong></p><p>3 - 2 –&gt; 3 + (-2) = 1<br>2 - 3 –&gt; 2 + (-3) = -1</p><p>-3的原码: 1011   反码:1100   补码:1101<br>2的原码: 0010<br>原码算:<br>2-3 = 0010+1011 = 1101(原)  = -5<br>补码算:<br>0010+1101 = 1111(补) = 1110(反) = 1001(原) = -1</p><p>-3 + -2  = -5<br>-3原码: 1011  反：1100  补:1101<br>-2原码: 1010  反: 1101  补: 1110<br>原码算:<br>-3 + -2 = 1011+1010 = 0101(原) = 5<br>补码算:<br>1101+1110 = 1011(补)=1010(反)=1101(原) = -5</p><h1 id="位运算-amp-按位与-按位或运算-按位取反-按位异或-gt-gt-右移-lt-lt-左移"><a href="#位运算-amp-按位与-按位或运算-按位取反-按位异或-gt-gt-右移-lt-lt-左移" class="headerlink" title="位运算: &amp;(按位与), |(按位或运算), ~(按位取反), ^(按位异或), &gt;&gt;(右移), &lt;&lt;(左移)"></a>位运算: &amp;(按位与), |(按位或运算), ~(按位取反), ^(按位异或), &gt;&gt;(右移), &lt;&lt;(左移)</h1><p>###a、 &amp;(按位与)<br>数字1 &amp; 数字2 –&gt; 每一位上的数都为1结果就是1，有0就是0<br>1 &amp; 1 = 1<br>1 &amp; 0 = 0<br>0 &amp; 1 = 0<br>0 &amp; 0 = 0<br>特点: 一个位上的数如果和1与，可以保留这个位上的数； 和0与可以置0<br>（重要）<br><strong>应用：判断一个数的奇偶性(如果一个数的二进制的最低位是1就是奇数，否则是偶数)</strong></p><pre><code>num % 2 == 0  --&gt; num是偶数 (传统)num &amp; 1 == 0  --&gt; num是偶数num &amp; 1 == 1  --&gt; num是奇数print(3 &amp; 2)   # 0011 &amp; 0010 = 0010(补)print(-3 &amp; -2)</code></pre><p>-3: 1011(原) 1100(反) 1101(补)<br>-2: 原:1010  反: 1101  补: 1110<br>1101 &amp; 1110 = 1100(补)=1011(反)=1100(原)</p><pre><code>print(2 &amp; 1, 200 &amp; 1, -100 &amp; 1)print(5 &amp; 1, 111 &amp; 1, -13 &amp; 1)</code></pre><p>###b、|(按位或运算)<br>数字1 | 数字2： 只要有1结果就是1，两个都为0结果才是0<br>1 | 1 = 1<br>1 | 0 = 1<br>0 | 1 = 1<br>0 | 0 = 0<br>特点: 和1或，置1</p><pre><code>print(3 | 2)   # 0011 | 0010 = 0011(补)print(-3 | -2)  # 1101 | 1110 = 1111(补)=1110(反)=1001(原码)</code></pre><p>###c、~(按位取反)<br>~数字 : 将数字上的每一位取反<br>~1 = 0<br>~0 = 1</p><pre><code>print(~3)   # ~0011 = 1100(补)=1011(反)=1100print(~-4)   #  ~~3 = 3</code></pre><p>###d、^(按位异或)（重要）<br>数字1 ^ 数字2 : 相同为0，不同为1<br>1 ^ 1 = 0<br>1 ^ 0 = 1<br>0 ^ 1 = 1<br>0 ^ 0 = 0<br>应用: 加密<br>判断2个数是否相等，相等等于0，不相等等于1</p><pre><code>print(3 ^ 10997)   # 3 ^ 2 = 1print(10998 ^ 10997)   # 1 ^ 2 = 3</code></pre><p>###e、 &gt;&gt;(右移), &lt;&lt;(左移)（重要）<br>数字1 &lt;&lt; N：数字1左移N位, 数字1 * 2<strong>N<br>数字1 &gt;&gt; N: 数字1右移N位，数字1 // 2</strong>N<br>应用：快速乘2的次方/除2的次方</p><pre><code>print(4 &lt;&lt; 1)print(-3 &lt;&lt; 2)print(5 &gt;&gt; 2)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 进制与位运算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制与位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim编辑器之神</title>
      <link href="/2019/02/22/vim-bian-ji-qi-zhi-shen/"/>
      <url>/2019/02/22/vim-bian-ji-qi-zhi-shen/</url>
      
        <content type="html"><![CDATA[<h1 id="vim编辑器之神"><a href="#vim编辑器之神" class="headerlink" title="vim编辑器之神"></a>vim编辑器之神</h1><h3 id="配置vimrc配置"><a href="#配置vimrc配置" class="headerlink" title="配置vimrc配置"></a>配置vimrc配置</h3><p>在shell中可以通过 <code>vim ~/.vimrc</code> 或者 <code>vim /etc/vimrc</code> 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：</p><p><img src="http://pnbdq6q26.bkt.clouddn.com/vim1.png" alt> </p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-模式切换"><a href="#1-模式切换" class="headerlink" title="1.模式切换"></a>1.模式切换</h4><p>我们可以将vim分为命令模式、编辑模式和末行模式三种<br><strong>命令模式：</strong>进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)</p><p><strong>末行模式：</strong>在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)</p><p><strong>编辑模式：</strong>在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–)  </p><p>####2.保存和退出<br>在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面<br><strong>w</strong> – 只保存(类似快捷键ctr+s)<br><strong>q</strong> – 退出（在编辑区的内容全部都保存的情况下才有效）<br><strong>wq</strong> – 保存并退出<br><strong>q!</strong>  – 强制退出（不保存修改信息）    </p><p>####3.光标操作<br>以下光标操作都是在命令模式下输入的<br><strong>^(shift+6)</strong>  – 移动到行首<br><strong>$(shift+4)</strong>  – 移动到行尾<br><strong>G(shift+g)</strong>    – 移动到文件末尾<br><strong>行号G</strong>            – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行<br><strong>gg</strong>                – 移动到文件开头  </p><p>####4.文本操作<br>以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入<br><strong>dd</strong>            – 删除光标所在的行<br><strong>数字dd</strong>        – 从光标所在行开始往后面开始删，删除指定数量行内容<br><strong>:%d</strong>        – 删除所有     </p><p><strong>yy</strong>         – 复制光标所在的行<br><strong>数字yy</strong>        – 从光标所在行开始复制指定行数的内容<br><strong>p</strong>            – 将复制的内容粘贴到光标所在的位置<br><strong>u</strong>            – 撤销<br><strong>ctr+r</strong>    – 反撤销    </p><p><strong>:%!sort</strong>  – 对内容排序  </p><p><strong>:/查找对象[/gice]</strong>    – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找  </p><p>*<em>:1,$s/被替换对象/替换内容[/gice</em>]*    – 将正则表达式匹配到的内容替换成指定内容   </p><pre><code>-    g: 全局匹配  -     i: 忽略大小写 -   c: 替换时需要提示  -   e: 忽略错误  </code></pre>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2019/02/21/hexo-bo-ke-da-jian/"/>
      <url>/2019/02/21/hexo-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<p>Hexo博客搭建   </p><h1 id="1-搭建博客"><a href="#1-搭建博客" class="headerlink" title="1. 搭建博客"></a>1. 搭建博客</h1><p>使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   </p><ol><li>首先在自己的电脑上创建一个空的文件夹’Hexo’  </li><li>在gitbash中终端中通过<code>cd</code>指令进入到刚才创建的文件夹中   </li><li>输入指令 <code>npm install -g hexo</code> 安装Hexo  </li><li>输入指令 <code>hexo init</code> 进行初始化  </li><li>依次输入指令<code>npm install</code> <code>hexo server</code> 启动服务器<br> 博客内容发生改变后可以通过<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> <code>hexo server</code>刷新后重新启动    </li></ol><h1 id="2-部署博客"><a href="#2-部署博客" class="headerlink" title="2. 部署博客"></a>2. 部署博客</h1><ol><li>在github上创建一个空的仓库，仓库名： <code>用户名.github.io</code>  </li><li><p>修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容<br><img src="/Users/yuting/Desktop/Hexo/image1.png" alt>  </p></li><li><p>使用git部署, 输入指令<code>npm install hexo-deployer-git --save</code>  </p></li><li>输入指令<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> 对博客进行提交</li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL配置</title>
      <link href="/2019/02/21/mysql-pei-zhi/"/>
      <url>/2019/02/21/mysql-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>MySQL配置  </p><ol><li><p>下载MySQL源安装包: <code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code>  </p></li><li><p>安装MySQL源: <code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p></li><li><p>安装MySQL:  <code>yum install mysql-community-server</code>  </p></li><li><p>设置开启启动MySQL服务: <code>systemctl enable mysqld</code>  </p></li><li>启动/重启MySQL服务：systemctl restart mysqld  </li><li>查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log  </li><li>更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’<br> 这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法：</li></ol><p>　　　　方法一：把密码设置复杂点（这是最直接的方法）</p><p>　　　　方法二：关闭mysql密码强度验证(validate_password)</p><p>　　　　　　　　编辑配置文件：<code>vim /etc/my.cnf</code>， 增加这么一行validate_password=off</p><p>　　　　　　　　编辑后重启mysql服务：<code>systemctl restart mysqld</code>  　　　　　　　　  　　　　　　　　  </p><ol start="8"><li>设置mysql能够远程访问:<br> a. 登录进MySQL:  <code>mysql -uroot -p密码</code><br> b. 增加一个用户给予访问权限: <code>grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option;</code><br> c. 刷新权限：<code>flush privileges;­</code>  </li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx服务器</title>
      <link href="/2019/02/21/nginx-fu-wu-qi-an-zhuang/"/>
      <url>/2019/02/21/nginx-fu-wu-qi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx服务器"><a href="#Nginx服务器" class="headerlink" title="Nginx服务器"></a>Nginx服务器</h1><h3 id="1-阿里云添加80端口"><a href="#1-阿里云添加80端口" class="headerlink" title="1.阿里云添加80端口"></a>1.阿里云添加80端口</h3><p>阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</p><p><img src="http://pnbdq6q26.bkt.clouddn.com/aliyun0.png" alt="打开安全组设置"><br><img src="http://pnbdq6q26.bkt.clouddn.com/aliyun2.png" alt><br><img src="http://pnbdq6q26.bkt.clouddn.com/aliyun3.png" alt><br><img src="http://pnbdq6q26.bkt.clouddn.com/aliyun4.png" alt></p><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><p>a) 添加nginx存储库  </p><pre class=" language-python"><code class="language-python">    yum install epel<span class="token operator">-</span>release</code></pre><p>b) 安装nginx</p><pre class=" language-python"><code class="language-python">    yum install nginx</code></pre><p>c) 运行nginx<br>Nginx不会自行启动。要运行Nginx  </p><pre><code>    systemctl start nginx</code></pre><p>nginx的运行命令:  </p><pre><code>    systemctl status nginx 查看nginx的状态      systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动  </code></pre><p>d) 系统启动时启动Nginx  </p><pre><code>    systemctl enable nginx</code></pre><p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：   </p><pre><code>    sudo firewall-cmd --permanent --zone=public --add-service=http     sudo firewall-cmd --permanent --zone=public --add-service=https    sudo firewall-cmd --reload</code></pre><h3 id="3-nginx目录共享配置"><a href="#3-nginx目录共享配置" class="headerlink" title="3.nginx目录共享配置"></a>3.nginx目录共享配置</h3><p>a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting<br>b) 打开 etc/nginx/nginx.conf 文件，设置server</p><pre><code>    #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表    root /home/yuting;    location / {           autoindex on;           autoindex_exact_size on;           autoindex_localtime on;    }  </code></pre><p>除了可以共享文件，还可以自定义页面</p><pre><code>    #自定义服务器页面    location / {            root /home/yuting;            index index.html index.htm;    }</code></pre><p>注意： 如果出现权限问题，可以修改目录的权限  </p><h1 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h1><p>1.在主机和从机上执行：<code>ssh-keygen</code></p><p>2.在从机上执行:  <code>scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</code><br>(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</p><p>3.在主机中的.ssh文件夹中创建authorized_keys文件： <code>touch authorized_keys</code> </p><p>4.修改文件authorized_keys的权限: <code>chmod 600  authorized_keys</code>  </p><p>5.将master.pub放进authorized_keys文件中:  <code>cat master.pub &gt;&gt;  authorized_keys</code></p><p>6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式（python3）</title>
      <link href="/2019/02/21/zheng-ze-biao-da-shi/"/>
      <url>/2019/02/21/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是正则表达式-语法通用"><a href="#1-什么是正则表达式-语法通用" class="headerlink" title="1.什么是正则表达式(语法通用)"></a>1.什么是正则表达式(语法通用)</h1><p>正则就是一种用来做字符串匹配的工具,通过不同的符号匹配不同的字符</p><h1 id="2-python对正则表达式的支持"><a href="#2-python对正则表达式的支持" class="headerlink" title="2.python对正则表达式的支持"></a>2.python对正则表达式的支持</h1><p>通过re模块提供相应支持正则表达式的方法<br>a.fullmatch(正则表达式, 字符串)  –&gt; 用正则表达式来和指定字符串进行匹配，<br>                                   如果匹配成功返回匹配对象，匹配失败返回None<br>python正的正则表达式是写在字符串中的，但是一般情况下会在最前面加r/R</p><pre><code>from  re import fullmatch, search</code></pre><h1 id="0-普通字符-代表字符本身"><a href="#0-普通字符-代表字符本身" class="headerlink" title="0  普通字符(代表字符本身)"></a>0  普通字符(代表字符本身)</h1><pre><code> # 匹配一个字符串，只有三个字符，每个字符分别是a,b,c    re_str = r&#39;abc&#39;    result = fullmatch(re_str, &#39;abc&#39;)    print(result)</code></pre><h1 id="1-匹配任意字符"><a href="#1-匹配任意字符" class="headerlink" title="1  .(匹配任意字符)"></a>1  .(匹配任意字符)</h1><p> 注意：a. 一个.代表一个字符<br>                 b.不同匹配\n</p><pre><code># 匹配一个字符串，只有三个字符，第一个字符是a, 第二个字符是任意字符，最后一个字符是c</code></pre><pre><code>    re_str = r&#39;a.c&#39;    result = fullmatch(re_str, &#39;a\rc&#39;)    print(result)</code></pre><h1 id="2-w-匹配字母数字下划线中文"><a href="#2-w-匹配字母数字下划线中文" class="headerlink" title="2 \w(匹配字母数字下划线中文)"></a>2 \w(匹配字母数字下划线中文)</h1><p>   注意：a. 也可以匹配中文<br>               b. 一个\w只能匹配一个字符</p><pre><code>    # 匹配一个字符串，第一个字符是任意字符，第二个和第三个字符是字母、数字或者_, 最后是三个是abc    re_str = r&#39;.\w\wabc&#39;    result = fullmatch(re_str, &#39;o胡habc&#39;)    print(result)</code></pre><h1 id="3-s-匹配空白字符"><a href="#3-s-匹配空白字符" class="headerlink" title="3 \s(匹配空白字符)"></a>3 \s(匹配空白字符)</h1><p>   空白字符：指的是所有能产生空白的字符，包括空格、制表符、换行等<br>   匹配一个字符串，前两个字符是字母、数字、下划线或者中文，第三个字符是空白，最后一个字符是任意字符</p><pre><code>    re_str = r&#39;\w\w\s.&#39;    result = fullmatch(re_str, &#39;a2\t)&#39;)    print(result)</code></pre><h1 id="4-d-匹配数字字符"><a href="#4-d-匹配数字字符" class="headerlink" title="4 \d(匹配数字字符)"></a>4 \d(匹配数字字符)</h1><p>   匹配一个字符串有三个字符，每个字符都是数字字符</p><pre><code>    re_str = r&#39;\d\d\d&#39;    result = fullmatch(re_str, &#39;380&#39;)    print(result)</code></pre><h1 id="5-b-检测单词边界"><a href="#5-b-检测单词边界" class="headerlink" title="5 \b(检测单词边界)"></a>5 \b(检测单词边界)</h1><p>   a.检测正则表达式中\b所在的位置是否是单词边界<br>   b.单词边界：所有可以将两个单词区分开的符号都是单词边界,例如: 空格, 缩进, 标点符号等,单词开头、单词结尾</p><p>  注意：\b不是匹配符号，不会匹配出一个字符，只是检测所在的位置是否满足要求。</p><pre><code># 匹配一个字符串的内容是&#39;how are&#39;,并且要求字符&#39;a&#39;的前面是单词边界</code></pre><pre><code>    re_str = r&#39;\bhow\b,are&#39;    result = fullmatch(re_str, &#39;how,are&#39;)    print(result)    print(fullmatch(r&#39;\b\d\d\d&#39;, &#39;234&#39;))    print(search(r&#39;\b\d\d\d\b&#39;, &#39;sjsd90, 783,&#39;))</code></pre><h1 id="6-检测字符串开头"><a href="#6-检测字符串开头" class="headerlink" title="6 ^(检测字符串开头)"></a>6 ^(检测字符串开头)</h1><p>   匹配一个字符串是三个数字字符，并且第一个字符所在的位置是字符串开头</p><pre><code>    re_str = &#39;^\d\d\d&#39;    result = search(re_str, &#39;789sjhsdjjh7892sss&#39;)    print(result)</code></pre><h1 id="7-检测字符串结尾"><a href="#7-检测字符串结尾" class="headerlink" title="7 $(检测字符串结尾)"></a>7 $(检测字符串结尾)</h1><p>   匹配一个字符串是三个数字字符，并且最后一个字符的后面是字符串结尾</p><pre><code>    re_str = r&#39;\d\d\d$&#39;    result = search(re_str, &#39;sjss873ssjkd900&#39;)    print(result)</code></pre><pre><code># 8 \B(检测非单词边界)</code></pre><pre><code>    re_str = r&#39;abc\B123&#39;    result = fullmatch(re_str, &#39;abc123&#39;)    print(result)</code></pre><h1 id="9-W-匹配非数字字母下划线中文"><a href="#9-W-匹配非数字字母下划线中文" class="headerlink" title="9  \W(匹配非数字字母下划线中文)"></a>9  \W(匹配非数字字母下划线中文)</h1><h1 id="10-S-匹配非空白字符"><a href="#10-S-匹配非空白字符" class="headerlink" title="10 \S(匹配非空白字符)"></a>10 \S(匹配非空白字符)</h1><h1 id="11-D-匹配非数字字符"><a href="#11-D-匹配非数字字符" class="headerlink" title="11 \D(匹配非数字字符)"></a>11 \D(匹配非数字字符)</h1><h1 id="12、-字符集"><a href="#12、-字符集" class="headerlink" title="12、 字符集"></a>12、 <a href="匹配字符集中的任意一个字符">字符集</a></h1><p>   注意： 一个[]代表一个字符<br>   a.普通用法<br>   [字符集]  -  匹配字符集中的任意一个字符<br>   b.表示范围<br>    [字符1-字符2]  - 匹配字符1到字符2中所有的字符。要求字符1的编码值要小于字符2的编码值<br>    [1-9]  -  数字1到9<br>    [a-z]  - 小写字母<br>    [A-Z]  - 大写字母<br>    [a-zA-Z]    - 所有字母<br>    [a-zA-Z\d_] - 数字字母下划线</p><h1 id="匹配一个字符串有4个字符，第一个字符是’a’或者’b’或者’c’-后边是123"><a href="#匹配一个字符串有4个字符，第一个字符是’a’或者’b’或者’c’-后边是123" class="headerlink" title="匹配一个字符串有4个字符，第一个字符是’a’或者’b’或者’c’, 后边是123"></a>匹配一个字符串有4个字符，第一个字符是’a’或者’b’或者’c’, 后边是123</h1><pre><code>    re_str = r&#39;[abc]123&#39;    result = fullmatch(re_str, &#39;b123&#39;)    print(result)</code></pre><h1 id="匹配一个字符串有4个字符，第一个字符是数字1-9中的任意一个；最后一个字符是任意小写字母；中间两个字符是任意数字"><a href="#匹配一个字符串有4个字符，第一个字符是数字1-9中的任意一个；最后一个字符是任意小写字母；中间两个字符是任意数字" class="headerlink" title="匹配一个字符串有4个字符，第一个字符是数字1-9中的任意一个；最后一个字符是任意小写字母；中间两个字符是任意数字"></a>匹配一个字符串有4个字符，第一个字符是数字1-9中的任意一个；最后一个字符是任意小写字母；中间两个字符是任意数字</h1><pre><code>    re_str = r&#39;[1-7]\d\d[a-z]&#39;    result = fullmatch(re_str, &#39;212g&#39;)    print(result)    re_str = r&#39;[a-zA-Z\d_]&#39;    result = fullmatch(re_str, &#39;9&#39;)    print(result)</code></pre><h1 id="13-字符集-匹配没有在字符集中的其他任意字符"><a href="#13-字符集-匹配没有在字符集中的其他任意字符" class="headerlink" title="13 [^字符集] - 匹配没有在字符集中的其他任意字符"></a>13 [^字符集] - 匹配没有在字符集中的其他任意字符</h1><p>  注意：^放在[]的最前面才表示匹配不在字符集中的其他任意字符;^如果不放在[]的最前面，就表示字符^本身<br>  匹配一个字符串，第一个字符只要不是abc中的一个其他字符都可以，后面是123</p><pre><code>    re_str = r&#39;[^abc]123&#39;    result = fullmatch(re_str, &#39;胡123&#39;)    print(result)</code></pre><p>  第一个字符只要不是1-9中的任意一个其他都可以</p><pre><code>    re_str = r&#39;[^1-9]123&#39;    result = fullmatch(re_str, &#39;s123&#39;)    print(result)</code></pre><p>  第一个字符是1-9中的一个或者是^</p><pre><code>    re_str = r&#39;[1-9^]123&#39;    result = fullmatch(re_str, &#39;^123&#39;)    print(result)</code></pre><p> #14  转义符号<br>  a.正则中也可以通过在特殊符号前加’\’来对符号进行转义</p><p>  \ -  \字符<br>    . - .字符<br>    \^ -  ^字符</p><p> b.除了在中括号中有特殊意义的符号，其他符号放在[]中也是表示符号本身</p><pre><code> - ：在中括号中的两个字符之间表示谁到谁；如果想要表示它本身就不要放在两个字符之间 ^:  在中括号中的最前面有特殊意义；如果想要表示它本身就不要放在最前面 []: 在中括号中表示[],要加\</code></pre><p>   注意： 转义字符是字符串中的概念<br>          转义符号是正则表达式的概念</p><pre><code>    re_str = r&#39;\(\^\d\d\.\)\d\d\\b&#39;    print(fullmatch(re_str, r&#39;(^23.)45\b&#39;))    print(fullmatch(r&#39;[-19.\]*^]&#39;, &#39;*&#39;))</code></pre><h1 id="1-匹配0次或多次"><a href="#1-匹配0次或多次" class="headerlink" title="1 *(匹配0次或多次)"></a>1 *(匹配0次或多次)</h1><p>   字符*  - 指定的字符出现0次或者多次(这儿的字符可以是正则符号，也可以是普通字符)</p><p>   a<em> - a出现0次或者多次<br>    \d</em> - 任意数字出现0次或者多次<br>    [a-z]* - 任意小写字母出现0次或多次<br>   123前面有0个或者多个字符，并且每个字符都是a</p><pre><code>    re_str = r&#39;a*123&#39;    print(re.fullmatch(re_str, &#39;aaa123&#39;))    print(re.fullmatch(re_str, &#39;123&#39;))</code></pre><pre><code>123前面有0个或者多个字符，并且每个字符都是数字字符</code></pre><pre><code>    re_str = r&#39;\d*123&#39;    print(re.fullmatch(re_str, &#39;12123&#39;))    print(re.fullmatch(re_str, &#39;123&#39;))    re_str = r&#39;[a-z]*123&#39;    print(re.fullmatch(re_str, &#39;huagh123&#39;))    print(re.fullmatch(re_str, &#39;123&#39;)</code></pre><p> 2 +(匹配1次或多次)</p><pre><code>    re_str = r&#39;a+123&#39;    print(re.fullmatch(re_str, &#39;aaa123&#39;))    print(re.fullmatch(re_str, &#39;a123&#39;))</code></pre><p>  3 ?(匹配0次或者1次)</p><pre><code>    re_str = r&#39;\+?abc&#39;    print(re.fullmatch(re_str, &#39;+abc&#39;))</code></pre><p>   练习：写一个正则表达式能够匹配所有的整数字符串<br>    1233<br>    +233<br>    -384<br>    00233 不是整数</p><pre><code>    re_str = r&#39;[+-]?[1-9]\d*&#39;    print(re.fullmatch(re_str, &#39;389&#39;))</code></pre><p>   4 {}<br>    “””<br>    {M,N} - 匹配M到N次(最少M次，最多N次)<br>    {M,}  - 匹配至少M次<br>    {,N}  - 匹配最多N次<br>    {N}   - 匹配N次</p><pre><code>    print(re.fullmatch(r&#39;a{2,5}&#39;, &#39;aaaaa&#39;))    print(re.fullmatch(r&#39;a{2,}&#39;, &#39;aaa&#39;))    print(re.fullmatch(r&#39;a{,3}&#39;, &#39;aa&#39;))    print(re.fullmatch(r&#39;a{4}&#39;, &#39;aaaa&#39;))</code></pre><pre><code># 密码：6~16位，只能包含数字和字母</code></pre><pre><code>    print(re.fullmatch(r&#39;[a-zA-Z\d]{6,16}&#39;, &#39;3u2222&#39;))</code></pre><h1 id="1-分之"><a href="#1-分之" class="headerlink" title="1 |(分之)"></a>1 |(分之)</h1><p>表达式1|表达式2|表达式3  - 先用表达式进行匹配，匹配成功就直接成功；<br>                        不成功就使用表达式2去匹配；匹配失败再用表达式3去匹配…以此类推<br>                        (三个表达式中只要有一个能够匹配成功就成功，否则匹配失败)</p><h1 id="2-分组"><a href="#2-分组" class="headerlink" title="2 ()(分组)"></a>2 ()(分组)</h1><p>a.分组 - 将括号中的内容看成一个整体</p><pre><code>(abc){2}  --&gt; abcabcabc{2}  --&gt; abcc </code></pre><p>b.分组重复 - 在有分组的正则表达式中，可以在分组后面通过’\数字’来重复前面第几个分组匹配到的内容</p><pre><code>(\d{2})abc\1  --&gt; 78abc78</code></pre><pre><code>re_str = r&#39;[a-z]{3}|\d{3}&#39;print(re.fullmatch(re_str, &#39;384&#39;))re_str = r&#39;abc([A-Z]{2}|\d{2})&#39;print(re.fullmatch(re_str, &#39;abcKD&#39;))re_str = r&#39;(abc){2}&#39;print(re.fullmatch(re_str, &#39;abcabc&#39;))re_str = r&#39;(\d{2})a(\d{3})bc\2{2}\1&#39;print(re.fullmatch(re_str, &#39;34a890bc89089034&#39;))</code></pre>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux指令</title>
      <link href="/2019/02/20/linux-zhi-ling/"/>
      <url>/2019/02/20/linux-zhi-ling/</url>
      
        <content type="html"><![CDATA[<p>连接云服务器：<br>1.连接服务器:    ssh  root@ip地址<br>2.退出:  logout</p><p>Linux指令系统：</p><p>命令名称 [命名参数] [命令对象]</p><p>一、日常操作<br>1.cd指令       - 进入指定文件夹<br>cd  目录     - 进入指定目录(也可以是文件夹对应的路径)<br>               ~相对路径 — 绝对路径<br>cd  ..       - 返回上层目录<br>cd  ~    - 回到根目录<br>cd  /    - 进入系统根目录</p><ol start="2"><li>ls指令        - 查看当前目录中的内容<br>ls<br>ls  -l/-lh              -  查看详情<br>ls -a               - 隐藏文件也一起显示<br>ls -R            - 递归显示所有内容<br>ls -S/-t            - 按大小/时间排序</li></ol><p>3.pwd指令         - 显示当前完整目录<br>pwd</p><p>4.文件操作指令<br>touch  文件名        - 新建文件<br>cat 文件名           - 查看文件内容<br>vim/vi  文件名          -打开文件</p><p>rm    文件名        - 删除文件<br>rm - r 目录        - 删除文件夹</p><p>cp  文件名1  文件名2    - 将文件1中的内容拷贝到文件2中<br>cp  文件1路径   文件2路径<br>cp -r  文件名/目录名   目录2    - 将文件/目录拷贝到目录2中</p><p>mv    文件名1  文件名2    - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名）<br>mv  文件1路径   文件2路径</p><p>mv    文件名1  文件目录    - 将文件1移动到指定目录中<br>注意: mv指令不能加-r来操作目录</p><p>(注意：cp/mv/rm 后面可以跟： -i询问  -f强制  -n不覆盖)</p><p>mkdir  目录名        - 新建文件夹<br>mkdir -p a/b/c        - 按层级创建a,b,c三个文件夹<br>mkdir -p a/{b,c}/{d,e,f}    -同一层级常见多个</p><p>rmdir  目录名        - 删除指定空目录</p><p>7.history        - 显示历史指令记录<br>bashrc 配置显示时间：export  HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “<br>修改bashrc 后使其生效:  source ~/.bashrc  或 .  .bashrc<br>6.链接<br>ln -s 源路径  目标路径        - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！)<br>ln 源路径  目标路径            - 给源路径对应的文件在目标路径下创建一个硬链接（了解）<br>注意: 源文件不存在的时候，软件无效，硬链接变成普通文件<br>8.快捷键<br>ctr + f         - 前进一个字符<br>ctr + b        - 后退一个字符<br>ctr + a        - 回到行首<br>ctr + e         - 回到行尾<br>ctr + w        - 向左删除一个单词<br>ctr + u        - 向左删除全部<br>ctr + k        - 向右删除全部<br>ctr + y        - 粘贴上次删除的内容<br>ctr + l        - 清屏<br>二、进程相关指令(用得较少)<br>1.ps指令<br>ps                        - 进程状态<br>ps -aux  或者  ps ex            - 查看进程<br>ps -aux|grep 进程名        - 查看指定进程<br>ps grep  进程ID<br>2.top指令<br>top                         - 动态监控进程<br>top  -p PID1,PID2,….        - 动态监控指定进程<br>3.free指令<br>free -单位                    - 以指定单位查看内存, 例如 free -m (以Mb为单位显示内存状况), -g,  -k等！<br>4.kill指令<br>kill 进程号                    - 杀死指定的进程<br>kill -1/-9/-15                - -1(HUP)不间断重启，-9(KILL)强制杀死进程,-15(TERM)正常终止进程<br>pkill  进程名                - 按名字处理进程<br>killall 进程名                - 处理名字匹配的进程<br>uptime                    - 查看系统状态<br>三、权限管理<br>1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多)<br>users                                     - 查看当前用户<br>groups                                 - 查看当前分组<br>groupadd  分组名                            - 添加分组<br>useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名        - 创建一个用户添加到指定的分组中(在home创建相应的文件夹)<br>usermod -G 分组列表 用户名                    - 修改分组<br>passwd 用户名                            - 修改密码<br>su  用户名                                - 切换用户身份<br>sudo                                        - 以管理员执行其他程序<br>注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序<br>          b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容</p><pre><code>    ## Allow root to run any commands anywhere    root    ALL=(ALL)       ALL    xiaoming ALL=(ALL)      ALL        (自己添加的，xiaoming是用户名)</code></pre><p>2.chmod<br>chmod       权限值   文件            - 修改指定文件的权限<br>chmod    [a,u,g,o][+,-][r,w,x]  文件            - 为指定文件，给所有用户添加相应的权限<br>                                              (a:所有，u:自己，g:同组，o:其他；<br>                                            +：添加， -: 取消；<br>                                            r:读，w:写，x:执行)<br>chown  用户名     文件            - 改变文件所有者<br>￼<br>(权限制是三组二进制值)<br>self      group    other<br>rwx      rwx        rwx<br>111       101        001            - 自己读写可执行，同一分组的只读可执行，其他的只可执行<br>110      100        000<br>chmod  644  文件<br>chmod  777   文件<br>chmod 666    文件<br>三、日志管理<br>1.cat指令<br>cat       文件                - 查看文件内容<br>2.查看部分<br>head -n  N  文件        - 查看前N行内容<br>tail  -n  N    文件         - 查看后N行内容<br>3.<br>less [-N]  文件</p><pre><code>- 按 j 向下- 按 k 向上- 按 f 向下翻屏- 按    b 向上翻屏- 按 g 到全文开头- 按 G 到全文结尾- 按 Q 退出  </code></pre><p>more [-N]  文件            - 和less差不多，这个是尽可能多，less是尽可能少的加载</p><p>4.处理<br>sort                  - 排序  (cat 文件 |sort)<br>uniq                - 去重  (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用:  |sort|uniq<br>awk ‘{print $N}’    - 打印第N列的内容(netstat -natp|awk ‘{print $4}’)</p><p>history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3           -获取历史指令中，使用最频繁的三个指令</p><p>5.重定向<br>执行获取数据的指令  &gt; 文件  （将执行指定的结果存储到文件中 - 覆盖原文件中内容）<br>执行获取数据的指令 &gt;&gt; 文件   (将执行指定的结果存储到文件中 - 在原文件的最后追加)</p><p>5.统计<br>wc -c(字符)/-w(单词)/-l(行)  文件</p><p>6.查找<br>grep  查看对象    目录/文件  参数</p><pre><code>参数：    -i    忽略大小写:         grep you bb.txt   -i    -n   显示行标号：      grep you bb.txt -n   /   grep you bb.txt -i -n    -E   通过正则表达式匹配:     grep -E  ‘正则表达式’  文件    注意： Linux中，正则不支持: \d, \s,\w,\b,\D,\S,\W,\B                                       支持：.   +, *, ?, {N,M}, [], ^, $    -v   忽略字段:   grep you bb.txt -v  (在bb.txt中找不包含you的所有行)                    grep -E &#39;[0-9]+\.[0-9]+&#39; abb.txt -v    -rn  递归查找目录，并打印行号    grep -r  you ./   (在当前文件夹下中所有文件中去找包行’you’的行)    —include=‘*.py’    仅包含 py文件: grep -r you ./ --include=&#39;*.txt&#39;    —exclude=‘*.js’    不包含 js 文件: grep -r you ./ --exclude=&#39;*.c&#39;例如：    grep you bb.txt      grep you bb.txt -i    grep you bb.txt -i -n    grep -E &#39;[0-9]+&#39; bb.txt </code></pre><p>find       DIR    -name  ‘<em>.xxx’        找到目录下所有名字匹配的文件:  find a1 -name ‘</em>.txt’(在文件夹a1中找所有txt文件)</p><pre><code>例：find ./ -size +20k -size -100k -name &#39;*.txt&#39;   (找当前目录下大于20k并且小于100k的所有txt文件)</code></pre><p>which  指令        - 精确查找当前可执行的指令<br>whereis  指令    - 查找所有匹配的命令</p><p>四、网络管理</p><p>ifconfig     查看网卡状态</p><p>netstat   -natp                    - 查看网络连接状态<br>netstat   -natp|grep  端口号            - 查看指定端口的网络连接状态    </p><p>ping  地址<br>ping  -i   时间    地址<br>ping  -c  次数    地址</p><p>telnet  ip地址    端口         - 查看远程主机网络连接状况</p><p>dig 地址            - 查看DNS</p><p>** wget  地址            - 下载  </p><p>五、使用包管理工具<br>包管理工具：yum </p><ul><li>yum search：搜索软件包，例如yum search nginx。</li><li>yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。</li><li>yum install：安装软件包，例如yum install nginx。</li><li>yum remove：删除软件包，例如yum remove nginx。</li><li>yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。</li><li>yum check-update：检查有哪些可以更新的软件包。</li><li>yum info：显示软件包的相关信息，例如yum info nginx。</li></ul><p>源代码构建安装</p><ol><li>wget  安装包的路径        -下载安装包</li><li>gunzip/tar  压缩包         - 解压、解归档</li><li>(设置安装路径)</li><li>cd 安装包目录 执行: make &amp;&amp; make install       -编译安装包程序</li><li>给可执行文件添加软连接到usr/bin目录下            -添加快捷方式</li></ol><p>压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
