<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/02/21/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/02/21/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>Hexo博客搭建   </p><h1 id="1-搭建博客"><a href="#1-搭建博客" class="headerlink" title="1. 搭建博客"></a>1. 搭建博客</h1><p>使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   </p><ol><li>首先在自己的电脑上创建一个空的文件夹’Hexo’  </li><li>在gitbash中终端中通过<code>cd</code>指令进入到刚才创建的文件夹中   </li><li>输入指令 <code>npm install -g hexo</code> 安装Hexo  </li><li>输入指令 <code>hexo init</code> 进行初始化  </li><li>依次输入指令<code>npm install</code> <code>hexo server</code> 启动服务器<br> 博客内容发生改变后可以通过<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> <code>hexo server</code>刷新后重新启动    </li></ol><h1 id="2-部署博客"><a href="#2-部署博客" class="headerlink" title="2. 部署博客"></a>2. 部署博客</h1><ol><li>在github上创建一个空的仓库，仓库名： <code>用户名.github.io</code>  </li><li><p>修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容<br><img src="/Users/yuting/Desktop/Hexo/image1.png" alt>  </p></li><li><p>使用git部署, 输入指令<code>npm install hexo-deployer-git --save</code>  </p></li><li>输入指令<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> 对博客进行提交</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git常用指令</title>
      <link href="/2019/02/21/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/02/21/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h1><h2 id="1-基本指令"><a href="#1-基本指令" class="headerlink" title="1.基本指令"></a>1.基本指令</h2><p><code>git init</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  新建git仓库<br><code>git add 文件/文件夹</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  将文件添加到缓存区中<br><code>git add -A</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中<br><code>git stutas</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;———    查看git状态<br><code>git commit -m  ‘提交信息’</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  将缓存区中的内容全部提交到git本地仓库中  </p><p><code>git log</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——-    查看提交日志  </p><p><code>git reset  - - hard   HEAD</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——   让工作目录中的内容和仓库中的内容保持一致<br><code>git reset  --hard HEAD^</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到上一个版本<br><code>git  reset  - - hard 版本号</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到指定的版本<br><code>git checkout  - -  文件名</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态)  </p><p><code>git clone &lt;url&gt;</code> - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥)  </p><p><code>git remote add origin 地址</code>      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次)</p><p><code>git push [-u] origin master</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用)  </p><h2 id="2-分之管理"><a href="#2-分之管理" class="headerlink" title="2.分之管理"></a>2.分之管理</h2><p>创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发  </p><p>常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  </p><p><code>git branch [-a]</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        - 查看分之<br><code>git branch 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之<br><code>git checkout   分支名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-   切换分之<br><code>git checkout -b 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    - 切换并创建新的分之<br><code>git diff    分之1  分之2</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异<br><code>git merge 分之名</code>            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并     </p><p>注意: 切换分之、push、pull，这些操作前要保证工作区是clean  </p><p>怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL配置</title>
      <link href="/2019/02/21/MySQL%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/02/21/MySQL%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>MySQL配置  </p><ol><li><p>下载MySQL源安装包: <code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code>  </p></li><li><p>安装MySQL源: <code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p></li><li><p>安装MySQL:  <code>yum install mysql-community-server</code>  </p></li><li><p>设置开启启动MySQL服务: <code>systemctl enable mysqld</code>  </p></li><li>启动/重启MySQL服务：systemctl restart mysqld  </li><li>查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log  </li><li>更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’<br> 这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法：</li></ol><p>　　　　方法一：把密码设置复杂点（这是最直接的方法）</p><p>　　　　方法二：关闭mysql密码强度验证(validate_password)</p><p>　　　　　　　　编辑配置文件：<code>vim /etc/my.cnf</code>， 增加这么一行validate_password=off</p><p>　　　　　　　　编辑后重启mysql服务：<code>systemctl restart mysqld</code>  　　　　　　　　  　　　　　　　　  </p><ol start="8"><li>设置mysql能够远程访问:<br> a. 登录进MySQL:  <code>mysql -uroot -p密码</code><br> b. 增加一个用户给予访问权限: <code>grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option;</code><br> c. 刷新权限：<code>flush privileges;­</code>  </li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx服务器</title>
      <link href="/2019/02/21/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85/"/>
      <url>/2019/02/21/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx服务器"><a href="#Nginx服务器" class="headerlink" title="Nginx服务器"></a>Nginx服务器</h1><h3 id="1-阿里云添加80端口"><a href="#1-阿里云添加80端口" class="headerlink" title="1.阿里云添加80端口"></a>1.阿里云添加80端口</h3><p>阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</p><p><img src="./img/aliyun0.png" alt="打开安全组设置"><br><img src="./img/aliyun2.png" alt><br><img src="./img/aliyun3.png" alt><br><img src="./img/aliyun4.png" alt></p><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><p>a) 添加nginx存储库  </p><pre class=" language-python"><code class="language-python">    yum install epel<span class="token operator">-</span>release</code></pre><p>b) 安装nginx</p><pre class=" language-python"><code class="language-python">    yum install nginx</code></pre><p>c) 运行nginx<br>Nginx不会自行启动。要运行Nginx  </p><pre><code>    systemctl start nginx</code></pre><p>nginx的运行命令:  </p><pre><code>    systemctl status nginx 查看nginx的状态      systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动  </code></pre><p>d) 系统启动时启动Nginx  </p><pre><code>    systemctl enable nginx</code></pre><p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：   </p><pre><code>    sudo firewall-cmd --permanent --zone=public --add-service=http     sudo firewall-cmd --permanent --zone=public --add-service=https    sudo firewall-cmd --reload</code></pre><h3 id="3-nginx目录共享配置"><a href="#3-nginx目录共享配置" class="headerlink" title="3.nginx目录共享配置"></a>3.nginx目录共享配置</h3><p>a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting<br>b) 打开 etc/nginx/nginx.conf 文件，设置server</p><pre><code>    #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表    root /home/yuting;    location / {           autoindex on;           autoindex_exact_size on;           autoindex_localtime on;    }  </code></pre><p>除了可以共享文件，还可以自定义页面</p><pre><code>    #自定义服务器页面    location / {            root /home/yuting;            index index.html index.htm;    }</code></pre><p>注意： 如果出现权限问题，可以修改目录的权限  </p><h1 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h1><p>1.在主机和从机上执行：<code>ssh-keygen</code></p><p>2.在从机上执行:  <code>scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</code><br>(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</p><p>3.在主机中的.ssh文件夹中创建authorized_keys文件： <code>touch authorized_keys</code> </p><p>4.修改文件authorized_keys的权限: <code>chmod 600  authorized_keys</code>  </p><p>5.将master.pub放进authorized_keys文件中:  <code>cat master.pub &gt;&gt;  authorized_keys</code></p><p>6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式（python3）</title>
      <link href="/2019/02/21/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/02/21/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>#1.什么是正则表达式(语法通用)<br>正则就是一种用来做字符串匹配的工具,通过不同的符号匹配不同的字符</p><p>#2.python对正则表达式的支持<br>通过re模块提供相应支持正则表达式的方法<br>a.fullmatch(正则表达式, 字符串)  –&gt; 用正则表达式来和指定字符串进行匹配，<br>                                   如果匹配成功返回匹配对象，匹配失败返回None<br>python正的正则表达式是写在字符串中的，但是一般情况下会在最前面加r/R</p><pre><code>from  re import fullmatch, search</code></pre><h1 id="0-普通字符-代表字符本身"><a href="#0-普通字符-代表字符本身" class="headerlink" title="0  普通字符(代表字符本身)"></a>0  普通字符(代表字符本身)</h1><pre><code> # 匹配一个字符串，只有三个字符，每个字符分别是a,b,c    re_str = r&#39;abc&#39;    result = fullmatch(re_str, &#39;abc&#39;)    print(result)</code></pre><h1 id="1-匹配任意字符"><a href="#1-匹配任意字符" class="headerlink" title="1  .(匹配任意字符)"></a>1  .(匹配任意字符)</h1><p> 注意：a. 一个.代表一个字符<br>                 b.不同匹配\n</p><pre><code># 匹配一个字符串，只有三个字符，第一个字符是a, 第二个字符是任意字符，最后一个字符是c</code></pre><pre><code>    re_str = r&#39;a.c&#39;    result = fullmatch(re_str, &#39;a\rc&#39;)    print(result)</code></pre><h1 id="2-w-匹配字母数字下划线中文"><a href="#2-w-匹配字母数字下划线中文" class="headerlink" title="2 \w(匹配字母数字下划线中文)"></a>2 \w(匹配字母数字下划线中文)</h1><p>   注意：a. 也可以匹配中文<br>               b. 一个\w只能匹配一个字符</p><pre><code>    # 匹配一个字符串，第一个字符是任意字符，第二个和第三个字符是字母、数字或者_, 最后是三个是abc    re_str = r&#39;.\w\wabc&#39;    result = fullmatch(re_str, &#39;o胡habc&#39;)    print(result)</code></pre><h1 id="3-s-匹配空白字符"><a href="#3-s-匹配空白字符" class="headerlink" title="3 \s(匹配空白字符)"></a>3 \s(匹配空白字符)</h1><p>   空白字符：指的是所有能产生空白的字符，包括空格、制表符、换行等<br>   匹配一个字符串，前两个字符是字母、数字、下划线或者中文，第三个字符是空白，最后一个字符是任意字符</p><pre><code>    re_str = r&#39;\w\w\s.&#39;    result = fullmatch(re_str, &#39;a2\t)&#39;)    print(result)</code></pre><h1 id="4-d-匹配数字字符"><a href="#4-d-匹配数字字符" class="headerlink" title="4 \d(匹配数字字符)"></a>4 \d(匹配数字字符)</h1><p>   匹配一个字符串有三个字符，每个字符都是数字字符</p><pre><code>    re_str = r&#39;\d\d\d&#39;    result = fullmatch(re_str, &#39;380&#39;)    print(result)</code></pre><h1 id="5-b-检测单词边界"><a href="#5-b-检测单词边界" class="headerlink" title="5 \b(检测单词边界)"></a>5 \b(检测单词边界)</h1><p>   a.检测正则表达式中\b所在的位置是否是单词边界<br>   b.单词边界：所有可以将两个单词区分开的符号都是单词边界,例如: 空格, 缩进, 标点符号等,单词开头、单词结尾</p><p>  注意：\b不是匹配符号，不会匹配出一个字符，只是检测所在的位置是否满足要求。</p><pre><code># 匹配一个字符串的内容是&#39;how are&#39;,并且要求字符&#39;a&#39;的前面是单词边界</code></pre><pre><code>    re_str = r&#39;\bhow\b,are&#39;    result = fullmatch(re_str, &#39;how,are&#39;)    print(result)    print(fullmatch(r&#39;\b\d\d\d&#39;, &#39;234&#39;))    print(search(r&#39;\b\d\d\d\b&#39;, &#39;sjsd90, 783,&#39;))</code></pre><h1 id="6-检测字符串开头"><a href="#6-检测字符串开头" class="headerlink" title="6 ^(检测字符串开头)"></a>6 ^(检测字符串开头)</h1><p>   匹配一个字符串是三个数字字符，并且第一个字符所在的位置是字符串开头</p><pre><code>    re_str = &#39;^\d\d\d&#39;    result = search(re_str, &#39;789sjhsdjjh7892sss&#39;)    print(result)</code></pre><h1 id="7-检测字符串结尾"><a href="#7-检测字符串结尾" class="headerlink" title="7 $(检测字符串结尾)"></a>7 $(检测字符串结尾)</h1><p>   匹配一个字符串是三个数字字符，并且最后一个字符的后面是字符串结尾</p><pre><code>    re_str = r&#39;\d\d\d$&#39;    result = search(re_str, &#39;sjss873ssjkd900&#39;)    print(result)</code></pre><pre><code># 8 \B(检测非单词边界)</code></pre><pre><code>    re_str = r&#39;abc\B123&#39;    result = fullmatch(re_str, &#39;abc123&#39;)    print(result)</code></pre><h1 id="9-W-匹配非数字字母下划线中文"><a href="#9-W-匹配非数字字母下划线中文" class="headerlink" title="9  \W(匹配非数字字母下划线中文)"></a>9  \W(匹配非数字字母下划线中文)</h1><h1 id="10-S-匹配非空白字符"><a href="#10-S-匹配非空白字符" class="headerlink" title="10 \S(匹配非空白字符)"></a>10 \S(匹配非空白字符)</h1><h1 id="11-D-匹配非数字字符"><a href="#11-D-匹配非数字字符" class="headerlink" title="11 \D(匹配非数字字符)"></a>11 \D(匹配非数字字符)</h1><h1 id="12、-字符集"><a href="#12、-字符集" class="headerlink" title="12、 字符集"></a>12、 <a href="匹配字符集中的任意一个字符">字符集</a></h1><p>   注意： 一个[]代表一个字符<br>   a.普通用法<br>   [字符集]  -  匹配字符集中的任意一个字符<br>   b.表示范围<br>    [字符1-字符2]  - 匹配字符1到字符2中所有的字符。要求字符1的编码值要小于字符2的编码值<br>    [1-9]  -  数字1到9<br>    [a-z]  - 小写字母<br>    [A-Z]  - 大写字母<br>    [a-zA-Z]    - 所有字母<br>    [a-zA-Z\d_] - 数字字母下划线</p><h1 id="匹配一个字符串有4个字符，第一个字符是’a’或者’b’或者’c’-后边是123"><a href="#匹配一个字符串有4个字符，第一个字符是’a’或者’b’或者’c’-后边是123" class="headerlink" title="匹配一个字符串有4个字符，第一个字符是’a’或者’b’或者’c’, 后边是123"></a>匹配一个字符串有4个字符，第一个字符是’a’或者’b’或者’c’, 后边是123</h1><pre><code>    re_str = r&#39;[abc]123&#39;    result = fullmatch(re_str, &#39;b123&#39;)    print(result)</code></pre><h1 id="匹配一个字符串有4个字符，第一个字符是数字1-9中的任意一个；最后一个字符是任意小写字母；中间两个字符是任意数字"><a href="#匹配一个字符串有4个字符，第一个字符是数字1-9中的任意一个；最后一个字符是任意小写字母；中间两个字符是任意数字" class="headerlink" title="匹配一个字符串有4个字符，第一个字符是数字1-9中的任意一个；最后一个字符是任意小写字母；中间两个字符是任意数字"></a>匹配一个字符串有4个字符，第一个字符是数字1-9中的任意一个；最后一个字符是任意小写字母；中间两个字符是任意数字</h1><pre><code>    re_str = r&#39;[1-7]\d\d[a-z]&#39;    result = fullmatch(re_str, &#39;212g&#39;)    print(result)    re_str = r&#39;[a-zA-Z\d_]&#39;    result = fullmatch(re_str, &#39;9&#39;)    print(result)</code></pre><h1 id="13-字符集-匹配没有在字符集中的其他任意字符"><a href="#13-字符集-匹配没有在字符集中的其他任意字符" class="headerlink" title="13 [^字符集] - 匹配没有在字符集中的其他任意字符"></a>13 [^字符集] - 匹配没有在字符集中的其他任意字符</h1><p>  注意：^放在[]的最前面才表示匹配不在字符集中的其他任意字符;^如果不放在[]的最前面，就表示字符^本身<br>  匹配一个字符串，第一个字符只要不是abc中的一个其他字符都可以，后面是123</p><pre><code>    re_str = r&#39;[^abc]123&#39;    result = fullmatch(re_str, &#39;胡123&#39;)    print(result)</code></pre><p>  第一个字符只要不是1-9中的任意一个其他都可以</p><pre><code>    re_str = r&#39;[^1-9]123&#39;    result = fullmatch(re_str, &#39;s123&#39;)    print(result)</code></pre><p>  第一个字符是1-9中的一个或者是^</p><pre><code>    re_str = r&#39;[1-9^]123&#39;    result = fullmatch(re_str, &#39;^123&#39;)    print(result)</code></pre><p> #14  转义符号<br>  a.正则中也可以通过在特殊符号前加’\’来对符号进行转义</p><p>  \ -  \字符<br>    . - .字符<br>    \^ -  ^字符</p><p> b.除了在中括号中有特殊意义的符号，其他符号放在[]中也是表示符号本身</p><pre><code> - ：在中括号中的两个字符之间表示谁到谁；如果想要表示它本身就不要放在两个字符之间 ^:  在中括号中的最前面有特殊意义；如果想要表示它本身就不要放在最前面 []: 在中括号中表示[],要加\</code></pre><p>   注意： 转义字符是字符串中的概念<br>          转义符号是正则表达式的概念</p><pre><code>    re_str = r&#39;\(\^\d\d\.\)\d\d\\b&#39;    print(fullmatch(re_str, r&#39;(^23.)45\b&#39;))    print(fullmatch(r&#39;[-19.\]*^]&#39;, &#39;*&#39;))</code></pre><h1 id="1-匹配0次或多次"><a href="#1-匹配0次或多次" class="headerlink" title="1 *(匹配0次或多次)"></a>1 *(匹配0次或多次)</h1><p>   字符*  - 指定的字符出现0次或者多次(这儿的字符可以是正则符号，也可以是普通字符)</p><p>   a<em> - a出现0次或者多次<br>    \d</em> - 任意数字出现0次或者多次<br>    [a-z]* - 任意小写字母出现0次或多次<br>   123前面有0个或者多个字符，并且每个字符都是a</p><pre><code>    re_str = r&#39;a*123&#39;    print(re.fullmatch(re_str, &#39;aaa123&#39;))    print(re.fullmatch(re_str, &#39;123&#39;))</code></pre><pre><code>123前面有0个或者多个字符，并且每个字符都是数字字符</code></pre><pre><code>    re_str = r&#39;\d*123&#39;    print(re.fullmatch(re_str, &#39;12123&#39;))    print(re.fullmatch(re_str, &#39;123&#39;))    re_str = r&#39;[a-z]*123&#39;    print(re.fullmatch(re_str, &#39;huagh123&#39;))    print(re.fullmatch(re_str, &#39;123&#39;)</code></pre><p> 2 +(匹配1次或多次)</p><pre><code>    re_str = r&#39;a+123&#39;    print(re.fullmatch(re_str, &#39;aaa123&#39;))    print(re.fullmatch(re_str, &#39;a123&#39;))</code></pre><p>  3 ?(匹配0次或者1次)</p><pre><code>    re_str = r&#39;\+?abc&#39;    print(re.fullmatch(re_str, &#39;+abc&#39;))</code></pre><p>   练习：写一个正则表达式能够匹配所有的整数字符串<br>    1233<br>    +233<br>    -384<br>    00233 不是整数</p><pre><code>    re_str = r&#39;[+-]?[1-9]\d*&#39;    print(re.fullmatch(re_str, &#39;389&#39;))</code></pre><p>   4 {}<br>    “””<br>    {M,N} - 匹配M到N次(最少M次，最多N次)<br>    {M,}  - 匹配至少M次<br>    {,N}  - 匹配最多N次<br>    {N}   - 匹配N次</p><pre><code>    print(re.fullmatch(r&#39;a{2,5}&#39;, &#39;aaaaa&#39;))    print(re.fullmatch(r&#39;a{2,}&#39;, &#39;aaa&#39;))    print(re.fullmatch(r&#39;a{,3}&#39;, &#39;aa&#39;))    print(re.fullmatch(r&#39;a{4}&#39;, &#39;aaaa&#39;))</code></pre><pre><code># 密码：6~16位，只能包含数字和字母</code></pre><pre><code>    print(re.fullmatch(r&#39;[a-zA-Z\d]{6,16}&#39;, &#39;3u2222&#39;))</code></pre><h1 id="1-分之"><a href="#1-分之" class="headerlink" title="1 |(分之)"></a>1 |(分之)</h1><p>表达式1|表达式2|表达式3  - 先用表达式进行匹配，匹配成功就直接成功；<br>                        不成功就使用表达式2去匹配；匹配失败再用表达式3去匹配…以此类推<br>                        (三个表达式中只要有一个能够匹配成功就成功，否则匹配失败)</p><h1 id="2-分组"><a href="#2-分组" class="headerlink" title="2 ()(分组)"></a>2 ()(分组)</h1><p>a.分组 - 将括号中的内容看成一个整体</p><pre><code>(abc){2}  --&gt; abcabcabc{2}  --&gt; abcc </code></pre><p>b.分组重复 - 在有分组的正则表达式中，可以在分组后面通过’\数字’来重复前面第几个分组匹配到的内容</p><pre><code>(\d{2})abc\1  --&gt; 78abc78</code></pre><pre><code>re_str = r&#39;[a-z]{3}|\d{3}&#39;print(re.fullmatch(re_str, &#39;384&#39;))re_str = r&#39;abc([A-Z]{2}|\d{2})&#39;print(re.fullmatch(re_str, &#39;abcKD&#39;))re_str = r&#39;(abc){2}&#39;print(re.fullmatch(re_str, &#39;abcabc&#39;))re_str = r&#39;(\d{2})a(\d{3})bc\2{2}\1&#39;print(re.fullmatch(re_str, &#39;34a890bc89089034&#39;))</code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux指令</title>
      <link href="/2019/02/20/Linux%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/02/20/Linux%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>连接云服务器：<br>1.连接服务器:    ssh  root@ip地址<br>2.退出:  logout</p><p>Linux指令系统：</p><p>命令名称 [命名参数] [命令对象]</p><p>一、日常操作<br>1.cd指令       - 进入指定文件夹<br>cd  目录     - 进入指定目录(也可以是文件夹对应的路径)<br>               ~相对路径 — 绝对路径<br>cd  ..       - 返回上层目录<br>cd  ~    - 回到根目录<br>cd  /    - 进入系统根目录</p><ol start="2"><li>ls指令        - 查看当前目录中的内容<br>ls<br>ls  -l/-lh              -  查看详情<br>ls -a               - 隐藏文件也一起显示<br>ls -R            - 递归显示所有内容<br>ls -S/-t            - 按大小/时间排序</li></ol><p>3.pwd指令         - 显示当前完整目录<br>pwd</p><p>4.文件操作指令<br>touch  文件名        - 新建文件<br>cat 文件名           - 查看文件内容<br>vim/vi  文件名          -打开文件</p><p>rm    文件名        - 删除文件<br>rm - r 目录        - 删除文件夹</p><p>cp  文件名1  文件名2    - 将文件1中的内容拷贝到文件2中<br>cp  文件1路径   文件2路径<br>cp -r  文件名/目录名   目录2    - 将文件/目录拷贝到目录2中</p><p>mv    文件名1  文件名2    - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名）<br>mv  文件1路径   文件2路径</p><p>mv    文件名1  文件目录    - 将文件1移动到指定目录中<br>注意: mv指令不能加-r来操作目录</p><p>(注意：cp/mv/rm 后面可以跟： -i询问  -f强制  -n不覆盖)</p><p>mkdir  目录名        - 新建文件夹<br>mkdir -p a/b/c        - 按层级创建a,b,c三个文件夹<br>mkdir -p a/{b,c}/{d,e,f}    -同一层级常见多个</p><p>rmdir  目录名        - 删除指定空目录</p><p>7.history        - 显示历史指令记录<br>bashrc 配置显示时间：export  HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “<br>修改bashrc 后使其生效:  source ~/.bashrc  或 .  .bashrc<br>6.链接<br>ln -s 源路径  目标路径        - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！)<br>ln 源路径  目标路径            - 给源路径对应的文件在目标路径下创建一个硬链接（了解）<br>注意: 源文件不存在的时候，软件无效，硬链接变成普通文件<br>8.快捷键<br>ctr + f         - 前进一个字符<br>ctr + b        - 后退一个字符<br>ctr + a        - 回到行首<br>ctr + e         - 回到行尾<br>ctr + w        - 向左删除一个单词<br>ctr + u        - 向左删除全部<br>ctr + k        - 向右删除全部<br>ctr + y        - 粘贴上次删除的内容<br>ctr + l        - 清屏<br>二、进程相关指令(用得较少)<br>1.ps指令<br>ps                        - 进程状态<br>ps -aux  或者  ps ex            - 查看进程<br>ps -aux|grep 进程名        - 查看指定进程<br>ps grep  进程ID<br>2.top指令<br>top                         - 动态监控进程<br>top  -p PID1,PID2,….        - 动态监控指定进程<br>3.free指令<br>free -单位                    - 以指定单位查看内存, 例如 free -m (以Mb为单位显示内存状况), -g,  -k等！<br>4.kill指令<br>kill 进程号                    - 杀死指定的进程<br>kill -1/-9/-15                - -1(HUP)不间断重启，-9(KILL)强制杀死进程,-15(TERM)正常终止进程<br>pkill  进程名                - 按名字处理进程<br>killall 进程名                - 处理名字匹配的进程<br>uptime                    - 查看系统状态<br>三、权限管理<br>1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多)<br>users                                     - 查看当前用户<br>groups                                 - 查看当前分组<br>groupadd  分组名                            - 添加分组<br>useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名        - 创建一个用户添加到指定的分组中(在home创建相应的文件夹)<br>usermod -G 分组列表 用户名                    - 修改分组<br>passwd 用户名                            - 修改密码<br>su  用户名                                - 切换用户身份<br>sudo                                        - 以管理员执行其他程序<br>注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序<br>          b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容</p><pre><code>    ## Allow root to run any commands anywhere    root    ALL=(ALL)       ALL    xiaoming ALL=(ALL)      ALL        (自己添加的，xiaoming是用户名)</code></pre><p>2.chmod<br>chmod       权限值   文件            - 修改指定文件的权限<br>chmod    [a,u,g,o][+,-][r,w,x]  文件            - 为指定文件，给所有用户添加相应的权限<br>                                              (a:所有，u:自己，g:同组，o:其他；<br>                                            +：添加， -: 取消；<br>                                            r:读，w:写，x:执行)<br>chown  用户名     文件            - 改变文件所有者<br>￼<br>(权限制是三组二进制值)<br>self      group    other<br>rwx      rwx        rwx<br>111       101        001            - 自己读写可执行，同一分组的只读可执行，其他的只可执行<br>110      100        000<br>chmod  644  文件<br>chmod  777   文件<br>chmod 666    文件<br>三、日志管理<br>1.cat指令<br>cat       文件                - 查看文件内容<br>2.查看部分<br>head -n  N  文件        - 查看前N行内容<br>tail  -n  N    文件         - 查看后N行内容<br>3.<br>less [-N]  文件</p><pre><code>- 按 j 向下- 按 k 向上- 按 f 向下翻屏- 按    b 向上翻屏- 按 g 到全文开头- 按 G 到全文结尾- 按 Q 退出  </code></pre><p>more [-N]  文件            - 和less差不多，这个是尽可能多，less是尽可能少的加载</p><p>4.处理<br>sort                  - 排序  (cat 文件 |sort)<br>uniq                - 去重  (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用:  |sort|uniq<br>awk ‘{print $N}’    - 打印第N列的内容(netstat -natp|awk ‘{print $4}’)</p><p>history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3           -获取历史指令中，使用最频繁的三个指令</p><p>5.重定向<br>执行获取数据的指令  &gt; 文件  （将执行指定的结果存储到文件中 - 覆盖原文件中内容）<br>执行获取数据的指令 &gt;&gt; 文件   (将执行指定的结果存储到文件中 - 在原文件的最后追加)</p><p>5.统计<br>wc -c(字符)/-w(单词)/-l(行)  文件</p><p>6.查找<br>grep  查看对象    目录/文件  参数</p><pre><code>参数：    -i    忽略大小写:         grep you bb.txt   -i    -n   显示行标号：      grep you bb.txt -n   /   grep you bb.txt -i -n    -E   通过正则表达式匹配:     grep -E  ‘正则表达式’  文件    注意： Linux中，正则不支持: \d, \s,\w,\b,\D,\S,\W,\B                                       支持：.   +, *, ?, {N,M}, [], ^, $    -v   忽略字段:   grep you bb.txt -v  (在bb.txt中找不包含you的所有行)                    grep -E &#39;[0-9]+\.[0-9]+&#39; abb.txt -v    -rn  递归查找目录，并打印行号    grep -r  you ./   (在当前文件夹下中所有文件中去找包行’you’的行)    —include=‘*.py’    仅包含 py文件: grep -r you ./ --include=&#39;*.txt&#39;    —exclude=‘*.js’    不包含 js 文件: grep -r you ./ --exclude=&#39;*.c&#39;例如：    grep you bb.txt      grep you bb.txt -i    grep you bb.txt -i -n    grep -E &#39;[0-9]+&#39; bb.txt </code></pre><p>find       DIR    -name  ‘<em>.xxx’        找到目录下所有名字匹配的文件:  find a1 -name ‘</em>.txt’(在文件夹a1中找所有txt文件)</p><pre><code>例：find ./ -size +20k -size -100k -name &#39;*.txt&#39;   (找当前目录下大于20k并且小于100k的所有txt文件)</code></pre><p>which  指令        - 精确查找当前可执行的指令<br>whereis  指令    - 查找所有匹配的命令</p><p>四、网络管理</p><p>ifconfig     查看网卡状态</p><p>netstat   -natp                    - 查看网络连接状态<br>netstat   -natp|grep  端口号            - 查看指定端口的网络连接状态    </p><p>ping  地址<br>ping  -i   时间    地址<br>ping  -c  次数    地址</p><p>telnet  ip地址    端口         - 查看远程主机网络连接状况</p><p>dig 地址            - 查看DNS</p><p>** wget  地址            - 下载  </p><p>五、使用包管理工具<br>包管理工具：yum </p><ul><li>yum search：搜索软件包，例如yum search nginx。</li><li>yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。</li><li>yum install：安装软件包，例如yum install nginx。</li><li>yum remove：删除软件包，例如yum remove nginx。</li><li>yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。</li><li>yum check-update：检查有哪些可以更新的软件包。</li><li>yum info：显示软件包的相关信息，例如yum info nginx。</li></ul><p>源代码构建安装</p><ol><li>wget  安装包的路径        -下载安装包</li><li>gunzip/tar  压缩包         - 解压、解归档</li><li>(设置安装路径)</li><li>cd 安装包目录 执行: make &amp;&amp; make install       -编译安装包程序</li><li>给可执行文件添加软连接到usr/bin目录下            -添加快捷方式</li></ol><p>压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
